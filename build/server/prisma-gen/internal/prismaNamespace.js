"use strict";
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.defineExtension = exports.NullsOrder = exports.QueryMode = exports.JsonNullValueFilter = exports.JsonNullValueInput = exports.NullableJsonNullValueInput = exports.SortOrder = exports.BanScalarFieldEnum = exports.FaqScalarFieldEnum = exports.NotificationScalarFieldEnum = exports.CurrencyScalarFieldEnum = exports.TransactionScalarFieldEnum = exports.ProfitScalarFieldEnum = exports.InvestmentScalarFieldEnum = exports.InvestmentPlanScalarFieldEnum = exports.TokenScalarFieldEnum = exports.AccountGroupScalarFieldEnum = exports.AccountScalarFieldEnum = exports.UserScalarFieldEnum = exports.TransactionIsolationLevel = exports.ModelName = exports.AnyNull = exports.JsonNull = exports.DbNull = exports.NullTypes = exports.prismaVersion = exports.getExtensionContext = exports.Decimal = exports.Sql = exports.raw = exports.join = exports.empty = exports.sql = exports.PrismaClientValidationError = exports.PrismaClientInitializationError = exports.PrismaClientRustPanicError = exports.PrismaClientUnknownRequestError = exports.PrismaClientKnownRequestError = exports.validator = void 0;
const runtime = __importStar(require("@prisma/client/runtime/library"));
/**
 * Validator
 */
exports.validator = runtime.Public.validator;
/**
 * Prisma Errors
 */
exports.PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError;
exports.PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError;
exports.PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;
exports.PrismaClientInitializationError = runtime.PrismaClientInitializationError;
exports.PrismaClientValidationError = runtime.PrismaClientValidationError;
/**
 * Re-export of sql-template-tag
 */
exports.sql = runtime.sqltag;
exports.empty = runtime.empty;
exports.join = runtime.join;
exports.raw = runtime.raw;
exports.Sql = runtime.Sql;
/**
 * Decimal.js
 */
exports.Decimal = runtime.Decimal;
exports.getExtensionContext = runtime.Extensions.getExtensionContext;
/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
exports.prismaVersion = {
    client: "6.8.2",
    engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
};
exports.NullTypes = {
    DbNull: runtime.objectEnumValues.classes.DbNull,
    JsonNull: runtime.objectEnumValues.classes.JsonNull,
    AnyNull: runtime.objectEnumValues.classes.AnyNull,
};
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
exports.DbNull = runtime.objectEnumValues.instances.DbNull;
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
exports.JsonNull = runtime.objectEnumValues.instances.JsonNull;
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
exports.AnyNull = runtime.objectEnumValues.instances.AnyNull;
exports.ModelName = {
    User: 'User',
    Account: 'Account',
    AccountGroup: 'AccountGroup',
    Token: 'Token',
    InvestmentPlan: 'InvestmentPlan',
    Investment: 'Investment',
    Profit: 'Profit',
    Transaction: 'Transaction',
    Currency: 'Currency',
    Notification: 'Notification',
    Faq: 'Faq',
    Ban: 'Ban'
};
/**
 * Enums
 */
exports.TransactionIsolationLevel = runtime.makeStrictEnum({
    Serializable: 'Serializable'
});
exports.UserScalarFieldEnum = {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    verified: 'verified',
    role: 'role',
    accountGroupId: 'accountGroupId',
    image: 'image',
    phoneNumber: 'phoneNumber',
    address: 'address',
    country: 'country',
    region: 'region',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ipAddresses: 'ipAddresses',
    devices: 'devices',
    isBanned: 'isBanned'
};
exports.AccountScalarFieldEnum = {
    id: 'id',
    userId: 'userId',
    walletBalance: 'walletBalance',
    kycIdType: 'kycIdType',
    kycDocument: 'kycDocument',
    kycDocumentExt: 'kycDocumentExt',
    kycStatus: 'kycStatus',
    kycSubmittedAt: 'kycSubmittedAt',
    kycVerifiedAt: 'kycVerifiedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.AccountGroupScalarFieldEnum = {
    id: 'id',
    name: 'name',
    currencies: 'currencies',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.TokenScalarFieldEnum = {
    id: 'id',
    userId: 'userId',
    value: 'value',
    expiresIn: 'expiresIn',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.InvestmentPlanScalarFieldEnum = {
    id: 'id',
    name: 'name',
    slug: 'slug',
    image: 'image',
    tiers: 'tiers',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.InvestmentScalarFieldEnum = {
    id: 'id',
    userId: 'userId',
    autocompounded: 'autocompounded',
    investmentStatus: 'investmentStatus',
    initialDeposit: 'initialDeposit',
    expectedReturnRate: 'expectedReturnRate',
    autocompoundedReturnRate: 'autocompoundedReturnRate',
    expectedTotalReturns: 'expectedTotalReturns',
    currentTotalReturns: 'currentTotalReturns',
    currentCompoundedAmount: 'currentCompoundedAmount',
    investmentName: 'investmentName',
    investmentTier: 'investmentTier',
    minimumDeposit: 'minimumDeposit',
    duration: 'duration',
    terminationFee: 'terminationFee',
    daysCompleted: 'daysCompleted',
    lastProfitDistributedAt: 'lastProfitDistributedAt',
    lastProfitAmount: 'lastProfitAmount',
    hasTransferedProfitToWallet: 'hasTransferedProfitToWallet',
    closedAt: 'closedAt',
    pausedAt: 'pausedAt',
    pausedReason: 'pausedReason',
    terminatedAt: 'terminatedAt',
    terminator: 'terminator',
    terminationReason: 'terminationReason',
    terminationFeeApplied: 'terminationFeeApplied',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.ProfitScalarFieldEnum = {
    id: 'id',
    userId: 'userId',
    accountId: 'accountId',
    investmentId: 'investmentId',
    amount: 'amount',
    status: 'status',
    distributedAt: 'distributedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.TransactionScalarFieldEnum = {
    id: 'id',
    userId: 'userId',
    investmentId: 'investmentId',
    transactionType: 'transactionType',
    transactionStatus: 'transactionStatus',
    amountInUSD: 'amountInUSD',
    charge: 'charge',
    actualAmountInUSD: 'actualAmountInUSD',
    rate: 'rate',
    currency: 'currency',
    amountInCurrency: 'amountInCurrency',
    isWireTransfer: 'isWireTransfer',
    isGiftCard: 'isGiftCard',
    giftCardData: 'giftCardData',
    wireTransferEmail: 'wireTransferEmail',
    depositWalletAddress: 'depositWalletAddress',
    depositWalletAddressNetwork: 'depositWalletAddressNetwork',
    withdrawalWalletAddress: 'withdrawalWalletAddress',
    withdrawalWalletAddressNetwork: 'withdrawalWalletAddressNetwork',
    approvedAt: 'approvedAt',
    failedAt: 'failedAt',
    failReason: 'failReason',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.CurrencyScalarFieldEnum = {
    id: 'id',
    name: 'name',
    symbol: 'symbol',
    abbr: 'abbr',
    image: 'image',
    rate: 'rate',
    rateUpdatedAt: 'rateUpdatedAt',
    walletAddress: 'walletAddress',
    walletAddressNetwork: 'walletAddressNetwork',
    isAvailableForWithdrawal: 'isAvailableForWithdrawal',
    withdrawalCharge: 'withdrawalCharge',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.NotificationScalarFieldEnum = {
    id: 'id',
    userId: 'userId',
    title: 'title',
    description: 'description',
    isRead: 'isRead',
    icon: 'icon',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.FaqScalarFieldEnum = {
    id: 'id',
    slug: 'slug',
    title: 'title',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.BanScalarFieldEnum = {
    id: 'id',
    userId: 'userId',
    reason: 'reason',
    bannedBy: 'bannedBy',
    areInvestmentsFrozen: 'areInvestmentsFrozen',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    expiresAt: 'expiresAt',
    active: 'active',
    ipAddresses: 'ipAddresses'
};
exports.SortOrder = {
    asc: 'asc',
    desc: 'desc'
};
exports.NullableJsonNullValueInput = {
    DbNull: exports.DbNull,
    JsonNull: exports.JsonNull
};
exports.JsonNullValueInput = {
    JsonNull: exports.JsonNull
};
exports.JsonNullValueFilter = {
    DbNull: exports.DbNull,
    JsonNull: exports.JsonNull,
    AnyNull: exports.AnyNull
};
exports.QueryMode = {
    default: 'default',
    insensitive: 'insensitive'
};
exports.NullsOrder = {
    first: 'first',
    last: 'last'
};
exports.defineExtension = runtime.Extensions.defineExtension;
