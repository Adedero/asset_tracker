/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */
import * as runtime from "@prisma/client/runtime/library";
/**
 * Validator
 */
export const validator = runtime.Public.validator;
/**
 * Prisma Errors
 */
export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError;
export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError;
export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;
export const PrismaClientInitializationError = runtime.PrismaClientInitializationError;
export const PrismaClientValidationError = runtime.PrismaClientValidationError;
/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag;
export const empty = runtime.empty;
export const join = runtime.join;
export const raw = runtime.raw;
export const Sql = runtime.Sql;
/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal;
export const getExtensionContext = runtime.Extensions.getExtensionContext;
/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
export const prismaVersion = {
    client: "6.8.2",
    engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
};
export const NullTypes = {
    DbNull: runtime.objectEnumValues.classes.DbNull,
    JsonNull: runtime.objectEnumValues.classes.JsonNull,
    AnyNull: runtime.objectEnumValues.classes.AnyNull
};
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull;
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull;
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull;
export const ModelName = {
    User: "User",
    Account: "Account",
    AccountGroup: "AccountGroup",
    Token: "Token",
    InvestmentPlan: "InvestmentPlan",
    Investment: "Investment",
    Profit: "Profit",
    Transaction: "Transaction",
    Currency: "Currency",
    Notification: "Notification",
    Faq: "Faq",
    Ban: "Ban"
};
/**
 * Enums
 */
export const TransactionIsolationLevel = runtime.makeStrictEnum({
    Serializable: "Serializable"
});
export const UserScalarFieldEnum = {
    id: "id",
    name: "name",
    email: "email",
    password: "password",
    verified: "verified",
    role: "role",
    accountGroupId: "accountGroupId",
    image: "image",
    phoneNumber: "phoneNumber",
    address: "address",
    country: "country",
    region: "region",
    createdAt: "createdAt",
    updatedAt: "updatedAt",
    ipAddresses: "ipAddresses",
    devices: "devices",
    isBanned: "isBanned"
};
export const AccountScalarFieldEnum = {
    id: "id",
    userId: "userId",
    walletBalance: "walletBalance",
    kycIdType: "kycIdType",
    kycDocument: "kycDocument",
    kycDocumentExt: "kycDocumentExt",
    kycStatus: "kycStatus",
    kycSubmittedAt: "kycSubmittedAt",
    kycVerifiedAt: "kycVerifiedAt",
    createdAt: "createdAt",
    updatedAt: "updatedAt"
};
export const AccountGroupScalarFieldEnum = {
    id: "id",
    name: "name",
    currencies: "currencies",
    description: "description",
    createdAt: "createdAt",
    updatedAt: "updatedAt"
};
export const TokenScalarFieldEnum = {
    id: "id",
    userId: "userId",
    value: "value",
    expiresIn: "expiresIn",
    createdAt: "createdAt",
    updatedAt: "updatedAt"
};
export const InvestmentPlanScalarFieldEnum = {
    id: "id",
    name: "name",
    slug: "slug",
    image: "image",
    tiers: "tiers",
    createdAt: "createdAt",
    updatedAt: "updatedAt"
};
export const InvestmentScalarFieldEnum = {
    id: "id",
    userId: "userId",
    autocompounded: "autocompounded",
    investmentStatus: "investmentStatus",
    initialDeposit: "initialDeposit",
    expectedReturnRate: "expectedReturnRate",
    autocompoundedReturnRate: "autocompoundedReturnRate",
    expectedTotalReturns: "expectedTotalReturns",
    currentTotalReturns: "currentTotalReturns",
    currentCompoundedAmount: "currentCompoundedAmount",
    investmentName: "investmentName",
    investmentTier: "investmentTier",
    minimumDeposit: "minimumDeposit",
    duration: "duration",
    terminationFee: "terminationFee",
    daysCompleted: "daysCompleted",
    lastProfitDistributedAt: "lastProfitDistributedAt",
    lastProfitAmount: "lastProfitAmount",
    hasTransferedProfitToWallet: "hasTransferedProfitToWallet",
    closedAt: "closedAt",
    pausedAt: "pausedAt",
    pausedReason: "pausedReason",
    terminatedAt: "terminatedAt",
    terminator: "terminator",
    terminationReason: "terminationReason",
    terminationFeeApplied: "terminationFeeApplied",
    createdAt: "createdAt",
    updatedAt: "updatedAt"
};
export const ProfitScalarFieldEnum = {
    id: "id",
    userId: "userId",
    accountId: "accountId",
    investmentId: "investmentId",
    amount: "amount",
    status: "status",
    distributedAt: "distributedAt",
    createdAt: "createdAt",
    updatedAt: "updatedAt"
};
export const TransactionScalarFieldEnum = {
    id: "id",
    userId: "userId",
    investmentId: "investmentId",
    transactionType: "transactionType",
    transactionStatus: "transactionStatus",
    amountInUSD: "amountInUSD",
    charge: "charge",
    actualAmountInUSD: "actualAmountInUSD",
    rate: "rate",
    currency: "currency",
    amountInCurrency: "amountInCurrency",
    isWireTransfer: "isWireTransfer",
    isGiftCard: "isGiftCard",
    giftCardData: "giftCardData",
    wireTransferEmail: "wireTransferEmail",
    depositWalletAddress: "depositWalletAddress",
    depositWalletAddressNetwork: "depositWalletAddressNetwork",
    withdrawalWalletAddress: "withdrawalWalletAddress",
    withdrawalWalletAddressNetwork: "withdrawalWalletAddressNetwork",
    approvedAt: "approvedAt",
    failedAt: "failedAt",
    failReason: "failReason",
    description: "description",
    createdAt: "createdAt",
    updatedAt: "updatedAt"
};
export const CurrencyScalarFieldEnum = {
    id: "id",
    name: "name",
    symbol: "symbol",
    abbr: "abbr",
    image: "image",
    rate: "rate",
    rateUpdatedAt: "rateUpdatedAt",
    walletAddress: "walletAddress",
    walletAddressNetwork: "walletAddressNetwork",
    isAvailableForWithdrawal: "isAvailableForWithdrawal",
    withdrawalCharge: "withdrawalCharge",
    createdAt: "createdAt",
    updatedAt: "updatedAt"
};
export const NotificationScalarFieldEnum = {
    id: "id",
    userId: "userId",
    title: "title",
    description: "description",
    isRead: "isRead",
    icon: "icon",
    createdAt: "createdAt",
    updatedAt: "updatedAt"
};
export const FaqScalarFieldEnum = {
    id: "id",
    slug: "slug",
    title: "title",
    description: "description",
    createdAt: "createdAt",
    updatedAt: "updatedAt"
};
export const BanScalarFieldEnum = {
    id: "id",
    userId: "userId",
    reason: "reason",
    bannedBy: "bannedBy",
    areInvestmentsFrozen: "areInvestmentsFrozen",
    createdAt: "createdAt",
    updatedAt: "updatedAt",
    expiresAt: "expiresAt",
    active: "active",
    ipAddresses: "ipAddresses"
};
export const SortOrder = {
    asc: "asc",
    desc: "desc"
};
export const NullableJsonNullValueInput = {
    DbNull: DbNull,
    JsonNull: JsonNull
};
export const JsonNullValueInput = {
    JsonNull: JsonNull
};
export const JsonNullValueFilter = {
    DbNull: DbNull,
    JsonNull: JsonNull,
    AnyNull: AnyNull
};
export const QueryMode = {
    default: "default",
    insensitive: "insensitive"
};
export const NullsOrder = {
    first: "first",
    last: "last"
};
export const defineExtension = runtime.Extensions
    .defineExtension;
