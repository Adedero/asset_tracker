/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Faq` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from "../pjtg";
import * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Faq
 *
 */
export type FaqModel = runtime.Types.Result.DefaultSelection<Prisma.$FaqPayload>;

export type AggregateFaq = {
  _count: FaqCountAggregateOutputType | null;
  _min: FaqMinAggregateOutputType | null;
  _max: FaqMaxAggregateOutputType | null;
};

export type FaqMinAggregateOutputType = {
  id: string | null;
  slug: string | null;
  title: string | null;
  description: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type FaqMaxAggregateOutputType = {
  id: string | null;
  slug: string | null;
  title: string | null;
  description: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type FaqCountAggregateOutputType = {
  id: number;
  slug: number;
  title: number;
  description: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type FaqMinAggregateInputType = {
  id?: true;
  slug?: true;
  title?: true;
  description?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type FaqMaxAggregateInputType = {
  id?: true;
  slug?: true;
  title?: true;
  description?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type FaqCountAggregateInputType = {
  id?: true;
  slug?: true;
  title?: true;
  description?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type FaqAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Faq to aggregate.
   */
  where?: Prisma.FaqWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Faqs to fetch.
   */
  orderBy?: Prisma.FaqOrderByWithRelationInput | Prisma.FaqOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.FaqWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Faqs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Faqs.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Faqs
   **/
  _count?: true | FaqCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: FaqMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: FaqMaxAggregateInputType;
};

export type GetFaqAggregateType<T extends FaqAggregateArgs> = {
  [P in keyof T & keyof AggregateFaq]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFaq[P]>
    : Prisma.GetScalarType<T[P], AggregateFaq[P]>;
};

export type FaqGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.FaqWhereInput;
  orderBy?: Prisma.FaqOrderByWithAggregationInput | Prisma.FaqOrderByWithAggregationInput[];
  by: Prisma.FaqScalarFieldEnum[] | Prisma.FaqScalarFieldEnum;
  having?: Prisma.FaqScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: FaqCountAggregateInputType | true;
  _min?: FaqMinAggregateInputType;
  _max?: FaqMaxAggregateInputType;
};

export type FaqGroupByOutputType = {
  id: string;
  slug: string;
  title: string;
  description: string;
  createdAt: Date;
  updatedAt: Date;
  _count: FaqCountAggregateOutputType | null;
  _min: FaqMinAggregateOutputType | null;
  _max: FaqMaxAggregateOutputType | null;
};

type GetFaqGroupByPayload<T extends FaqGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FaqGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof FaqGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], FaqGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], FaqGroupByOutputType[P]>;
    }
  >
>;

export type FaqWhereInput = {
  AND?: Prisma.FaqWhereInput | Prisma.FaqWhereInput[];
  OR?: Prisma.FaqWhereInput[];
  NOT?: Prisma.FaqWhereInput | Prisma.FaqWhereInput[];
  id?: Prisma.StringFilter<"Faq"> | string;
  slug?: Prisma.StringFilter<"Faq"> | string;
  title?: Prisma.StringFilter<"Faq"> | string;
  description?: Prisma.StringFilter<"Faq"> | string;
  createdAt?: Prisma.DateTimeFilter<"Faq"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Faq"> | Date | string;
};

export type FaqOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  slug?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type FaqWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    slug?: string;
    AND?: Prisma.FaqWhereInput | Prisma.FaqWhereInput[];
    OR?: Prisma.FaqWhereInput[];
    NOT?: Prisma.FaqWhereInput | Prisma.FaqWhereInput[];
    title?: Prisma.StringFilter<"Faq"> | string;
    description?: Prisma.StringFilter<"Faq"> | string;
    createdAt?: Prisma.DateTimeFilter<"Faq"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"Faq"> | Date | string;
  },
  "id" | "slug"
>;

export type FaqOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  slug?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.FaqCountOrderByAggregateInput;
  _max?: Prisma.FaqMaxOrderByAggregateInput;
  _min?: Prisma.FaqMinOrderByAggregateInput;
};

export type FaqScalarWhereWithAggregatesInput = {
  AND?: Prisma.FaqScalarWhereWithAggregatesInput | Prisma.FaqScalarWhereWithAggregatesInput[];
  OR?: Prisma.FaqScalarWhereWithAggregatesInput[];
  NOT?: Prisma.FaqScalarWhereWithAggregatesInput | Prisma.FaqScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"Faq"> | string;
  slug?: Prisma.StringWithAggregatesFilter<"Faq"> | string;
  title?: Prisma.StringWithAggregatesFilter<"Faq"> | string;
  description?: Prisma.StringWithAggregatesFilter<"Faq"> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Faq"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Faq"> | Date | string;
};

export type FaqCreateInput = {
  id?: string;
  slug: string;
  title: string;
  description: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type FaqUncheckedCreateInput = {
  id?: string;
  slug: string;
  title: string;
  description: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type FaqUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  slug?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type FaqUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  slug?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type FaqCreateManyInput = {
  id?: string;
  slug: string;
  title: string;
  description: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type FaqUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  slug?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type FaqUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  slug?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type FaqCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  slug?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type FaqMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  slug?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type FaqMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  slug?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type FaqSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    slug?: boolean;
    title?: boolean;
    description?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs["result"]["faq"]
>;

export type FaqSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    slug?: boolean;
    title?: boolean;
    description?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs["result"]["faq"]
>;

export type FaqSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    slug?: boolean;
    title?: boolean;
    description?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs["result"]["faq"]
>;

export type FaqSelectScalar = {
  id?: boolean;
  slug?: boolean;
  title?: boolean;
  description?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type FaqOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "slug" | "title" | "description" | "createdAt" | "updatedAt",
  ExtArgs["result"]["faq"]
>;

export type $FaqPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "Faq";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      slug: string;
      title: string;
      description: string;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["faq"]
  >;
  composites: {};
};

export type FaqGetPayload<S extends boolean | null | undefined | FaqDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$FaqPayload, S>;

export type FaqCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<FaqFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: FaqCountAggregateInputType | true;
};

export interface FaqDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["Faq"]; meta: { name: "Faq" } };
  /**
   * Find zero or one Faq that matches the filter.
   * @param {FaqFindUniqueArgs} args - Arguments to find a Faq
   * @example
   * // Get one Faq
   * const faq = await prisma.faq.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FaqFindUniqueArgs>(
    args: Prisma.SelectSubset<T, FaqFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__FaqClient<
    runtime.Types.Result.GetResult<
      Prisma.$FaqPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Faq that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FaqFindUniqueOrThrowArgs} args - Arguments to find a Faq
   * @example
   * // Get one Faq
   * const faq = await prisma.faq.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FaqFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, FaqFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__FaqClient<
    runtime.Types.Result.GetResult<
      Prisma.$FaqPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Faq that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FaqFindFirstArgs} args - Arguments to find a Faq
   * @example
   * // Get one Faq
   * const faq = await prisma.faq.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FaqFindFirstArgs>(
    args?: Prisma.SelectSubset<T, FaqFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__FaqClient<
    runtime.Types.Result.GetResult<
      Prisma.$FaqPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Faq that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FaqFindFirstOrThrowArgs} args - Arguments to find a Faq
   * @example
   * // Get one Faq
   * const faq = await prisma.faq.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FaqFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, FaqFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__FaqClient<
    runtime.Types.Result.GetResult<
      Prisma.$FaqPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Faqs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FaqFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Faqs
   * const faqs = await prisma.faq.findMany()
   *
   * // Get first 10 Faqs
   * const faqs = await prisma.faq.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const faqWithIdOnly = await prisma.faq.findMany({ select: { id: true } })
   *
   */
  findMany<T extends FaqFindManyArgs>(
    args?: Prisma.SelectSubset<T, FaqFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a Faq.
   * @param {FaqCreateArgs} args - Arguments to create a Faq.
   * @example
   * // Create one Faq
   * const Faq = await prisma.faq.create({
   *   data: {
   *     // ... data to create a Faq
   *   }
   * })
   *
   */
  create<T extends FaqCreateArgs>(
    args: Prisma.SelectSubset<T, FaqCreateArgs<ExtArgs>>
  ): Prisma.Prisma__FaqClient<
    runtime.Types.Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Faqs.
   * @param {FaqCreateManyArgs} args - Arguments to create many Faqs.
   * @example
   * // Create many Faqs
   * const faq = await prisma.faq.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends FaqCreateManyArgs>(
    args?: Prisma.SelectSubset<T, FaqCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Faqs and returns the data saved in the database.
   * @param {FaqCreateManyAndReturnArgs} args - Arguments to create many Faqs.
   * @example
   * // Create many Faqs
   * const faq = await prisma.faq.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Faqs and only return the `id`
   * const faqWithIdOnly = await prisma.faq.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends FaqCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, FaqCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FaqPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Faq.
   * @param {FaqDeleteArgs} args - Arguments to delete one Faq.
   * @example
   * // Delete one Faq
   * const Faq = await prisma.faq.delete({
   *   where: {
   *     // ... filter to delete one Faq
   *   }
   * })
   *
   */
  delete<T extends FaqDeleteArgs>(
    args: Prisma.SelectSubset<T, FaqDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__FaqClient<
    runtime.Types.Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Faq.
   * @param {FaqUpdateArgs} args - Arguments to update one Faq.
   * @example
   * // Update one Faq
   * const faq = await prisma.faq.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends FaqUpdateArgs>(
    args: Prisma.SelectSubset<T, FaqUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__FaqClient<
    runtime.Types.Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Faqs.
   * @param {FaqDeleteManyArgs} args - Arguments to filter Faqs to delete.
   * @example
   * // Delete a few Faqs
   * const { count } = await prisma.faq.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends FaqDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, FaqDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Faqs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FaqUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Faqs
   * const faq = await prisma.faq.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends FaqUpdateManyArgs>(
    args: Prisma.SelectSubset<T, FaqUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Faqs and returns the data updated in the database.
   * @param {FaqUpdateManyAndReturnArgs} args - Arguments to update many Faqs.
   * @example
   * // Update many Faqs
   * const faq = await prisma.faq.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Faqs and only return the `id`
   * const faqWithIdOnly = await prisma.faq.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends FaqUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, FaqUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FaqPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Faq.
   * @param {FaqUpsertArgs} args - Arguments to update or create a Faq.
   * @example
   * // Update or create a Faq
   * const faq = await prisma.faq.upsert({
   *   create: {
   *     // ... data to create a Faq
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Faq we want to update
   *   }
   * })
   */
  upsert<T extends FaqUpsertArgs>(
    args: Prisma.SelectSubset<T, FaqUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__FaqClient<
    runtime.Types.Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Faqs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FaqCountArgs} args - Arguments to filter Faqs to count.
   * @example
   * // Count the number of Faqs
   * const count = await prisma.faq.count({
   *   where: {
   *     // ... the filter for the Faqs we want to count
   *   }
   * })
   **/
  count<T extends FaqCountArgs>(
    args?: Prisma.Subset<T, FaqCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], FaqCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Faq.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FaqAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends FaqAggregateArgs>(
    args: Prisma.Subset<T, FaqAggregateArgs>
  ): Prisma.PrismaPromise<GetFaqAggregateType<T>>;

  /**
   * Group by Faq.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FaqGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends FaqGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FaqGroupByArgs["orderBy"] }
      : { orderBy?: FaqGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, FaqGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetFaqGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Faq model
   */
  readonly fields: FaqFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Faq.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FaqClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Faq model
 */
export interface FaqFieldRefs {
  readonly id: Prisma.FieldRef<"Faq", "String">;
  readonly slug: Prisma.FieldRef<"Faq", "String">;
  readonly title: Prisma.FieldRef<"Faq", "String">;
  readonly description: Prisma.FieldRef<"Faq", "String">;
  readonly createdAt: Prisma.FieldRef<"Faq", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"Faq", "DateTime">;
}

// Custom InputTypes
/**
 * Faq findUnique
 */
export type FaqFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Faq
   */
  select?: Prisma.FaqSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Faq
   */
  omit?: Prisma.FaqOmit<ExtArgs> | null;
  /**
   * Filter, which Faq to fetch.
   */
  where: Prisma.FaqWhereUniqueInput;
};

/**
 * Faq findUniqueOrThrow
 */
export type FaqFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Faq
   */
  select?: Prisma.FaqSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Faq
   */
  omit?: Prisma.FaqOmit<ExtArgs> | null;
  /**
   * Filter, which Faq to fetch.
   */
  where: Prisma.FaqWhereUniqueInput;
};

/**
 * Faq findFirst
 */
export type FaqFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Faq
   */
  select?: Prisma.FaqSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Faq
   */
  omit?: Prisma.FaqOmit<ExtArgs> | null;
  /**
   * Filter, which Faq to fetch.
   */
  where?: Prisma.FaqWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Faqs to fetch.
   */
  orderBy?: Prisma.FaqOrderByWithRelationInput | Prisma.FaqOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Faqs.
   */
  cursor?: Prisma.FaqWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Faqs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Faqs.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Faqs.
   */
  distinct?: Prisma.FaqScalarFieldEnum | Prisma.FaqScalarFieldEnum[];
};

/**
 * Faq findFirstOrThrow
 */
export type FaqFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Faq
   */
  select?: Prisma.FaqSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Faq
   */
  omit?: Prisma.FaqOmit<ExtArgs> | null;
  /**
   * Filter, which Faq to fetch.
   */
  where?: Prisma.FaqWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Faqs to fetch.
   */
  orderBy?: Prisma.FaqOrderByWithRelationInput | Prisma.FaqOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Faqs.
   */
  cursor?: Prisma.FaqWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Faqs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Faqs.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Faqs.
   */
  distinct?: Prisma.FaqScalarFieldEnum | Prisma.FaqScalarFieldEnum[];
};

/**
 * Faq findMany
 */
export type FaqFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Faq
   */
  select?: Prisma.FaqSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Faq
   */
  omit?: Prisma.FaqOmit<ExtArgs> | null;
  /**
   * Filter, which Faqs to fetch.
   */
  where?: Prisma.FaqWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Faqs to fetch.
   */
  orderBy?: Prisma.FaqOrderByWithRelationInput | Prisma.FaqOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Faqs.
   */
  cursor?: Prisma.FaqWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Faqs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Faqs.
   */
  skip?: number;
  distinct?: Prisma.FaqScalarFieldEnum | Prisma.FaqScalarFieldEnum[];
};

/**
 * Faq create
 */
export type FaqCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Faq
   */
  select?: Prisma.FaqSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Faq
   */
  omit?: Prisma.FaqOmit<ExtArgs> | null;
  /**
   * The data needed to create a Faq.
   */
  data: Prisma.XOR<Prisma.FaqCreateInput, Prisma.FaqUncheckedCreateInput>;
};

/**
 * Faq createMany
 */
export type FaqCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many Faqs.
   */
  data: Prisma.FaqCreateManyInput | Prisma.FaqCreateManyInput[];
};

/**
 * Faq createManyAndReturn
 */
export type FaqCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Faq
   */
  select?: Prisma.FaqSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Faq
   */
  omit?: Prisma.FaqOmit<ExtArgs> | null;
  /**
   * The data used to create many Faqs.
   */
  data: Prisma.FaqCreateManyInput | Prisma.FaqCreateManyInput[];
};

/**
 * Faq update
 */
export type FaqUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Faq
   */
  select?: Prisma.FaqSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Faq
   */
  omit?: Prisma.FaqOmit<ExtArgs> | null;
  /**
   * The data needed to update a Faq.
   */
  data: Prisma.XOR<Prisma.FaqUpdateInput, Prisma.FaqUncheckedUpdateInput>;
  /**
   * Choose, which Faq to update.
   */
  where: Prisma.FaqWhereUniqueInput;
};

/**
 * Faq updateMany
 */
export type FaqUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update Faqs.
   */
  data: Prisma.XOR<Prisma.FaqUpdateManyMutationInput, Prisma.FaqUncheckedUpdateManyInput>;
  /**
   * Filter which Faqs to update
   */
  where?: Prisma.FaqWhereInput;
  /**
   * Limit how many Faqs to update.
   */
  limit?: number;
};

/**
 * Faq updateManyAndReturn
 */
export type FaqUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Faq
   */
  select?: Prisma.FaqSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Faq
   */
  omit?: Prisma.FaqOmit<ExtArgs> | null;
  /**
   * The data used to update Faqs.
   */
  data: Prisma.XOR<Prisma.FaqUpdateManyMutationInput, Prisma.FaqUncheckedUpdateManyInput>;
  /**
   * Filter which Faqs to update
   */
  where?: Prisma.FaqWhereInput;
  /**
   * Limit how many Faqs to update.
   */
  limit?: number;
};

/**
 * Faq upsert
 */
export type FaqUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Faq
   */
  select?: Prisma.FaqSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Faq
   */
  omit?: Prisma.FaqOmit<ExtArgs> | null;
  /**
   * The filter to search for the Faq to update in case it exists.
   */
  where: Prisma.FaqWhereUniqueInput;
  /**
   * In case the Faq found by the `where` argument doesn't exist, create a new Faq with this data.
   */
  create: Prisma.XOR<Prisma.FaqCreateInput, Prisma.FaqUncheckedCreateInput>;
  /**
   * In case the Faq was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FaqUpdateInput, Prisma.FaqUncheckedUpdateInput>;
};

/**
 * Faq delete
 */
export type FaqDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Faq
   */
  select?: Prisma.FaqSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Faq
   */
  omit?: Prisma.FaqOmit<ExtArgs> | null;
  /**
   * Filter which Faq to delete.
   */
  where: Prisma.FaqWhereUniqueInput;
};

/**
 * Faq deleteMany
 */
export type FaqDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Faqs to delete
   */
  where?: Prisma.FaqWhereInput;
  /**
   * Limit how many Faqs to delete.
   */
  limit?: number;
};

/**
 * Faq without action
 */
export type FaqDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Faq
   */
  select?: Prisma.FaqSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Faq
   */
  omit?: Prisma.FaqOmit<ExtArgs> | null;
};
