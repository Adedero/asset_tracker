/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Ban` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from "../pjtg";
import * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Ban
 *
 */
export type BanModel = runtime.Types.Result.DefaultSelection<Prisma.$BanPayload>;

export type AggregateBan = {
  _count: BanCountAggregateOutputType | null;
  _min: BanMinAggregateOutputType | null;
  _max: BanMaxAggregateOutputType | null;
};

export type BanMinAggregateOutputType = {
  id: string | null;
  userId: string | null;
  reason: string | null;
  bannedBy: string | null;
  areInvestmentsFrozen: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  expiresAt: Date | null;
  active: boolean | null;
};

export type BanMaxAggregateOutputType = {
  id: string | null;
  userId: string | null;
  reason: string | null;
  bannedBy: string | null;
  areInvestmentsFrozen: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  expiresAt: Date | null;
  active: boolean | null;
};

export type BanCountAggregateOutputType = {
  id: number;
  userId: number;
  reason: number;
  bannedBy: number;
  areInvestmentsFrozen: number;
  createdAt: number;
  updatedAt: number;
  expiresAt: number;
  active: number;
  ipAddresses: number;
  _all: number;
};

export type BanMinAggregateInputType = {
  id?: true;
  userId?: true;
  reason?: true;
  bannedBy?: true;
  areInvestmentsFrozen?: true;
  createdAt?: true;
  updatedAt?: true;
  expiresAt?: true;
  active?: true;
};

export type BanMaxAggregateInputType = {
  id?: true;
  userId?: true;
  reason?: true;
  bannedBy?: true;
  areInvestmentsFrozen?: true;
  createdAt?: true;
  updatedAt?: true;
  expiresAt?: true;
  active?: true;
};

export type BanCountAggregateInputType = {
  id?: true;
  userId?: true;
  reason?: true;
  bannedBy?: true;
  areInvestmentsFrozen?: true;
  createdAt?: true;
  updatedAt?: true;
  expiresAt?: true;
  active?: true;
  ipAddresses?: true;
  _all?: true;
};

export type BanAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Ban to aggregate.
   */
  where?: Prisma.BanWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Bans to fetch.
   */
  orderBy?: Prisma.BanOrderByWithRelationInput | Prisma.BanOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.BanWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Bans from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Bans.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Bans
   **/
  _count?: true | BanCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: BanMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: BanMaxAggregateInputType;
};

export type GetBanAggregateType<T extends BanAggregateArgs> = {
  [P in keyof T & keyof AggregateBan]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBan[P]>
    : Prisma.GetScalarType<T[P], AggregateBan[P]>;
};

export type BanGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.BanWhereInput;
  orderBy?: Prisma.BanOrderByWithAggregationInput | Prisma.BanOrderByWithAggregationInput[];
  by: Prisma.BanScalarFieldEnum[] | Prisma.BanScalarFieldEnum;
  having?: Prisma.BanScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: BanCountAggregateInputType | true;
  _min?: BanMinAggregateInputType;
  _max?: BanMaxAggregateInputType;
};

export type BanGroupByOutputType = {
  id: string;
  userId: string;
  reason: string | null;
  bannedBy: string;
  areInvestmentsFrozen: boolean;
  createdAt: Date;
  updatedAt: Date;
  expiresAt: Date | null;
  active: boolean;
  ipAddresses: PrismaJson.IpAddresses | null;
  _count: BanCountAggregateOutputType | null;
  _min: BanMinAggregateOutputType | null;
  _max: BanMaxAggregateOutputType | null;
};

type GetBanGroupByPayload<T extends BanGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BanGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof BanGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], BanGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], BanGroupByOutputType[P]>;
    }
  >
>;

export type BanWhereInput = {
  AND?: Prisma.BanWhereInput | Prisma.BanWhereInput[];
  OR?: Prisma.BanWhereInput[];
  NOT?: Prisma.BanWhereInput | Prisma.BanWhereInput[];
  id?: Prisma.StringFilter<"Ban"> | string;
  userId?: Prisma.StringFilter<"Ban"> | string;
  reason?: Prisma.StringNullableFilter<"Ban"> | string | null;
  bannedBy?: Prisma.StringFilter<"Ban"> | string;
  areInvestmentsFrozen?: Prisma.BoolFilter<"Ban"> | boolean;
  createdAt?: Prisma.DateTimeFilter<"Ban"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Ban"> | Date | string;
  expiresAt?: Prisma.DateTimeNullableFilter<"Ban"> | Date | string | null;
  active?: Prisma.BoolFilter<"Ban"> | boolean;
  ipAddresses?: Prisma.JsonNullableFilter<"Ban">;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type BanOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  reason?: Prisma.SortOrderInput | Prisma.SortOrder;
  bannedBy?: Prisma.SortOrder;
  areInvestmentsFrozen?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  expiresAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  active?: Prisma.SortOrder;
  ipAddresses?: Prisma.SortOrderInput | Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
};

export type BanWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    userId?: string;
    AND?: Prisma.BanWhereInput | Prisma.BanWhereInput[];
    OR?: Prisma.BanWhereInput[];
    NOT?: Prisma.BanWhereInput | Prisma.BanWhereInput[];
    reason?: Prisma.StringNullableFilter<"Ban"> | string | null;
    bannedBy?: Prisma.StringFilter<"Ban"> | string;
    areInvestmentsFrozen?: Prisma.BoolFilter<"Ban"> | boolean;
    createdAt?: Prisma.DateTimeFilter<"Ban"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"Ban"> | Date | string;
    expiresAt?: Prisma.DateTimeNullableFilter<"Ban"> | Date | string | null;
    active?: Prisma.BoolFilter<"Ban"> | boolean;
    ipAddresses?: Prisma.JsonNullableFilter<"Ban">;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  },
  "id" | "userId"
>;

export type BanOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  reason?: Prisma.SortOrderInput | Prisma.SortOrder;
  bannedBy?: Prisma.SortOrder;
  areInvestmentsFrozen?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  expiresAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  active?: Prisma.SortOrder;
  ipAddresses?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.BanCountOrderByAggregateInput;
  _max?: Prisma.BanMaxOrderByAggregateInput;
  _min?: Prisma.BanMinOrderByAggregateInput;
};

export type BanScalarWhereWithAggregatesInput = {
  AND?: Prisma.BanScalarWhereWithAggregatesInput | Prisma.BanScalarWhereWithAggregatesInput[];
  OR?: Prisma.BanScalarWhereWithAggregatesInput[];
  NOT?: Prisma.BanScalarWhereWithAggregatesInput | Prisma.BanScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"Ban"> | string;
  userId?: Prisma.StringWithAggregatesFilter<"Ban"> | string;
  reason?: Prisma.StringNullableWithAggregatesFilter<"Ban"> | string | null;
  bannedBy?: Prisma.StringWithAggregatesFilter<"Ban"> | string;
  areInvestmentsFrozen?: Prisma.BoolWithAggregatesFilter<"Ban"> | boolean;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Ban"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Ban"> | Date | string;
  expiresAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Ban"> | Date | string | null;
  active?: Prisma.BoolWithAggregatesFilter<"Ban"> | boolean;
  ipAddresses?: Prisma.JsonNullableWithAggregatesFilter<"Ban">;
};

export type BanCreateInput = {
  id?: string;
  reason?: string | null;
  bannedBy: string;
  areInvestmentsFrozen?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  expiresAt?: Date | string | null;
  active?: boolean;
  ipAddresses?: PrismaJson.IpAddresses | Prisma.NullableJsonNullValueInput;
  user: Prisma.UserCreateNestedOneWithoutBanInput;
};

export type BanUncheckedCreateInput = {
  id?: string;
  userId: string;
  reason?: string | null;
  bannedBy: string;
  areInvestmentsFrozen?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  expiresAt?: Date | string | null;
  active?: boolean;
  ipAddresses?: PrismaJson.IpAddresses | Prisma.NullableJsonNullValueInput;
};

export type BanUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  bannedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  areInvestmentsFrozen?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  ipAddresses?: PrismaJson.IpAddresses | Prisma.NullableJsonNullValueInput;
  user?: Prisma.UserUpdateOneRequiredWithoutBanNestedInput;
};

export type BanUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  bannedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  areInvestmentsFrozen?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  ipAddresses?: PrismaJson.IpAddresses | Prisma.NullableJsonNullValueInput;
};

export type BanCreateManyInput = {
  id?: string;
  userId: string;
  reason?: string | null;
  bannedBy: string;
  areInvestmentsFrozen?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  expiresAt?: Date | string | null;
  active?: boolean;
  ipAddresses?: PrismaJson.IpAddresses | Prisma.NullableJsonNullValueInput;
};

export type BanUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  bannedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  areInvestmentsFrozen?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  ipAddresses?: PrismaJson.IpAddresses | Prisma.NullableJsonNullValueInput;
};

export type BanUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  bannedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  areInvestmentsFrozen?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  ipAddresses?: PrismaJson.IpAddresses | Prisma.NullableJsonNullValueInput;
};

export type BanNullableScalarRelationFilter = {
  is?: Prisma.BanWhereInput | null;
  isNot?: Prisma.BanWhereInput | null;
};

export type BanCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  bannedBy?: Prisma.SortOrder;
  areInvestmentsFrozen?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  expiresAt?: Prisma.SortOrder;
  active?: Prisma.SortOrder;
  ipAddresses?: Prisma.SortOrder;
};

export type BanMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  bannedBy?: Prisma.SortOrder;
  areInvestmentsFrozen?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  expiresAt?: Prisma.SortOrder;
  active?: Prisma.SortOrder;
};

export type BanMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  reason?: Prisma.SortOrder;
  bannedBy?: Prisma.SortOrder;
  areInvestmentsFrozen?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  expiresAt?: Prisma.SortOrder;
  active?: Prisma.SortOrder;
};

export type BanCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.BanCreateWithoutUserInput, Prisma.BanUncheckedCreateWithoutUserInput>;
  connectOrCreate?: Prisma.BanCreateOrConnectWithoutUserInput;
  connect?: Prisma.BanWhereUniqueInput;
};

export type BanUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.BanCreateWithoutUserInput, Prisma.BanUncheckedCreateWithoutUserInput>;
  connectOrCreate?: Prisma.BanCreateOrConnectWithoutUserInput;
  connect?: Prisma.BanWhereUniqueInput;
};

export type BanUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.BanCreateWithoutUserInput, Prisma.BanUncheckedCreateWithoutUserInput>;
  connectOrCreate?: Prisma.BanCreateOrConnectWithoutUserInput;
  upsert?: Prisma.BanUpsertWithoutUserInput;
  disconnect?: Prisma.BanWhereInput | boolean;
  delete?: Prisma.BanWhereInput | boolean;
  connect?: Prisma.BanWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<Prisma.BanUpdateToOneWithWhereWithoutUserInput, Prisma.BanUpdateWithoutUserInput>,
    Prisma.BanUncheckedUpdateWithoutUserInput
  >;
};

export type BanUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.BanCreateWithoutUserInput, Prisma.BanUncheckedCreateWithoutUserInput>;
  connectOrCreate?: Prisma.BanCreateOrConnectWithoutUserInput;
  upsert?: Prisma.BanUpsertWithoutUserInput;
  disconnect?: Prisma.BanWhereInput | boolean;
  delete?: Prisma.BanWhereInput | boolean;
  connect?: Prisma.BanWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<Prisma.BanUpdateToOneWithWhereWithoutUserInput, Prisma.BanUpdateWithoutUserInput>,
    Prisma.BanUncheckedUpdateWithoutUserInput
  >;
};

export type BanCreateWithoutUserInput = {
  id?: string;
  reason?: string | null;
  bannedBy: string;
  areInvestmentsFrozen?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  expiresAt?: Date | string | null;
  active?: boolean;
  ipAddresses?: PrismaJson.IpAddresses | Prisma.NullableJsonNullValueInput;
};

export type BanUncheckedCreateWithoutUserInput = {
  id?: string;
  reason?: string | null;
  bannedBy: string;
  areInvestmentsFrozen?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  expiresAt?: Date | string | null;
  active?: boolean;
  ipAddresses?: PrismaJson.IpAddresses | Prisma.NullableJsonNullValueInput;
};

export type BanCreateOrConnectWithoutUserInput = {
  where: Prisma.BanWhereUniqueInput;
  create: Prisma.XOR<Prisma.BanCreateWithoutUserInput, Prisma.BanUncheckedCreateWithoutUserInput>;
};

export type BanUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.BanUpdateWithoutUserInput, Prisma.BanUncheckedUpdateWithoutUserInput>;
  create: Prisma.XOR<Prisma.BanCreateWithoutUserInput, Prisma.BanUncheckedCreateWithoutUserInput>;
  where?: Prisma.BanWhereInput;
};

export type BanUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.BanWhereInput;
  data: Prisma.XOR<Prisma.BanUpdateWithoutUserInput, Prisma.BanUncheckedUpdateWithoutUserInput>;
};

export type BanUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  bannedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  areInvestmentsFrozen?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  ipAddresses?: PrismaJson.IpAddresses | Prisma.NullableJsonNullValueInput;
};

export type BanUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  bannedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  areInvestmentsFrozen?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  ipAddresses?: PrismaJson.IpAddresses | Prisma.NullableJsonNullValueInput;
};

export type BanSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    reason?: boolean;
    bannedBy?: boolean;
    areInvestmentsFrozen?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    expiresAt?: boolean;
    active?: boolean;
    ipAddresses?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["ban"]
>;

export type BanSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    reason?: boolean;
    bannedBy?: boolean;
    areInvestmentsFrozen?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    expiresAt?: boolean;
    active?: boolean;
    ipAddresses?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["ban"]
>;

export type BanSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    reason?: boolean;
    bannedBy?: boolean;
    areInvestmentsFrozen?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    expiresAt?: boolean;
    active?: boolean;
    ipAddresses?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["ban"]
>;

export type BanSelectScalar = {
  id?: boolean;
  userId?: boolean;
  reason?: boolean;
  bannedBy?: boolean;
  areInvestmentsFrozen?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  expiresAt?: boolean;
  active?: boolean;
  ipAddresses?: boolean;
};

export type BanOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "userId"
  | "reason"
  | "bannedBy"
  | "areInvestmentsFrozen"
  | "createdAt"
  | "updatedAt"
  | "expiresAt"
  | "active"
  | "ipAddresses",
  ExtArgs["result"]["ban"]
>;
export type BanInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type BanIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type BanIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $BanPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "Ban";
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      userId: string;
      reason: string | null;
      bannedBy: string;
      areInvestmentsFrozen: boolean;
      createdAt: Date;
      updatedAt: Date;
      expiresAt: Date | null;
      active: boolean;
      /**
       * [IpAddresses]
       */
      ipAddresses: PrismaJson.IpAddresses | null;
    },
    ExtArgs["result"]["ban"]
  >;
  composites: {};
};

export type BanGetPayload<S extends boolean | null | undefined | BanDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$BanPayload, S>;

export type BanCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<BanFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: BanCountAggregateInputType | true;
};

export interface BanDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["Ban"]; meta: { name: "Ban" } };
  /**
   * Find zero or one Ban that matches the filter.
   * @param {BanFindUniqueArgs} args - Arguments to find a Ban
   * @example
   * // Get one Ban
   * const ban = await prisma.ban.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BanFindUniqueArgs>(
    args: Prisma.SelectSubset<T, BanFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__BanClient<
    runtime.Types.Result.GetResult<
      Prisma.$BanPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Ban that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BanFindUniqueOrThrowArgs} args - Arguments to find a Ban
   * @example
   * // Get one Ban
   * const ban = await prisma.ban.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BanFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, BanFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__BanClient<
    runtime.Types.Result.GetResult<
      Prisma.$BanPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Ban that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BanFindFirstArgs} args - Arguments to find a Ban
   * @example
   * // Get one Ban
   * const ban = await prisma.ban.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BanFindFirstArgs>(
    args?: Prisma.SelectSubset<T, BanFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__BanClient<
    runtime.Types.Result.GetResult<
      Prisma.$BanPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Ban that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BanFindFirstOrThrowArgs} args - Arguments to find a Ban
   * @example
   * // Get one Ban
   * const ban = await prisma.ban.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BanFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, BanFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__BanClient<
    runtime.Types.Result.GetResult<
      Prisma.$BanPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Bans that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BanFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Bans
   * const bans = await prisma.ban.findMany()
   *
   * // Get first 10 Bans
   * const bans = await prisma.ban.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const banWithIdOnly = await prisma.ban.findMany({ select: { id: true } })
   *
   */
  findMany<T extends BanFindManyArgs>(
    args?: Prisma.SelectSubset<T, BanFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$BanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a Ban.
   * @param {BanCreateArgs} args - Arguments to create a Ban.
   * @example
   * // Create one Ban
   * const Ban = await prisma.ban.create({
   *   data: {
   *     // ... data to create a Ban
   *   }
   * })
   *
   */
  create<T extends BanCreateArgs>(
    args: Prisma.SelectSubset<T, BanCreateArgs<ExtArgs>>
  ): Prisma.Prisma__BanClient<
    runtime.Types.Result.GetResult<Prisma.$BanPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Bans.
   * @param {BanCreateManyArgs} args - Arguments to create many Bans.
   * @example
   * // Create many Bans
   * const ban = await prisma.ban.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends BanCreateManyArgs>(
    args?: Prisma.SelectSubset<T, BanCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Bans and returns the data saved in the database.
   * @param {BanCreateManyAndReturnArgs} args - Arguments to create many Bans.
   * @example
   * // Create many Bans
   * const ban = await prisma.ban.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Bans and only return the `id`
   * const banWithIdOnly = await prisma.ban.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends BanCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, BanCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BanPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Ban.
   * @param {BanDeleteArgs} args - Arguments to delete one Ban.
   * @example
   * // Delete one Ban
   * const Ban = await prisma.ban.delete({
   *   where: {
   *     // ... filter to delete one Ban
   *   }
   * })
   *
   */
  delete<T extends BanDeleteArgs>(
    args: Prisma.SelectSubset<T, BanDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__BanClient<
    runtime.Types.Result.GetResult<Prisma.$BanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Ban.
   * @param {BanUpdateArgs} args - Arguments to update one Ban.
   * @example
   * // Update one Ban
   * const ban = await prisma.ban.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends BanUpdateArgs>(
    args: Prisma.SelectSubset<T, BanUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__BanClient<
    runtime.Types.Result.GetResult<Prisma.$BanPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Bans.
   * @param {BanDeleteManyArgs} args - Arguments to filter Bans to delete.
   * @example
   * // Delete a few Bans
   * const { count } = await prisma.ban.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends BanDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, BanDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Bans.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BanUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Bans
   * const ban = await prisma.ban.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends BanUpdateManyArgs>(
    args: Prisma.SelectSubset<T, BanUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Bans and returns the data updated in the database.
   * @param {BanUpdateManyAndReturnArgs} args - Arguments to update many Bans.
   * @example
   * // Update many Bans
   * const ban = await prisma.ban.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Bans and only return the `id`
   * const banWithIdOnly = await prisma.ban.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends BanUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, BanUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BanPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Ban.
   * @param {BanUpsertArgs} args - Arguments to update or create a Ban.
   * @example
   * // Update or create a Ban
   * const ban = await prisma.ban.upsert({
   *   create: {
   *     // ... data to create a Ban
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Ban we want to update
   *   }
   * })
   */
  upsert<T extends BanUpsertArgs>(
    args: Prisma.SelectSubset<T, BanUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__BanClient<
    runtime.Types.Result.GetResult<Prisma.$BanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Bans.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BanCountArgs} args - Arguments to filter Bans to count.
   * @example
   * // Count the number of Bans
   * const count = await prisma.ban.count({
   *   where: {
   *     // ... the filter for the Bans we want to count
   *   }
   * })
   **/
  count<T extends BanCountArgs>(
    args?: Prisma.Subset<T, BanCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], BanCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Ban.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends BanAggregateArgs>(
    args: Prisma.Subset<T, BanAggregateArgs>
  ): Prisma.PrismaPromise<GetBanAggregateType<T>>;

  /**
   * Group by Ban.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BanGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends BanGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BanGroupByArgs["orderBy"] }
      : { orderBy?: BanGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, BanGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetBanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Ban model
   */
  readonly fields: BanFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Ban.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BanClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Ban model
 */
export interface BanFieldRefs {
  readonly id: Prisma.FieldRef<"Ban", "String">;
  readonly userId: Prisma.FieldRef<"Ban", "String">;
  readonly reason: Prisma.FieldRef<"Ban", "String">;
  readonly bannedBy: Prisma.FieldRef<"Ban", "String">;
  readonly areInvestmentsFrozen: Prisma.FieldRef<"Ban", "Boolean">;
  readonly createdAt: Prisma.FieldRef<"Ban", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"Ban", "DateTime">;
  readonly expiresAt: Prisma.FieldRef<"Ban", "DateTime">;
  readonly active: Prisma.FieldRef<"Ban", "Boolean">;
  readonly ipAddresses: Prisma.FieldRef<"Ban", "Json">;
}

// Custom InputTypes
/**
 * Ban findUnique
 */
export type BanFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Ban
   */
  select?: Prisma.BanSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Ban
   */
  omit?: Prisma.BanOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BanInclude<ExtArgs> | null;
  /**
   * Filter, which Ban to fetch.
   */
  where: Prisma.BanWhereUniqueInput;
};

/**
 * Ban findUniqueOrThrow
 */
export type BanFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Ban
   */
  select?: Prisma.BanSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Ban
   */
  omit?: Prisma.BanOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BanInclude<ExtArgs> | null;
  /**
   * Filter, which Ban to fetch.
   */
  where: Prisma.BanWhereUniqueInput;
};

/**
 * Ban findFirst
 */
export type BanFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Ban
   */
  select?: Prisma.BanSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Ban
   */
  omit?: Prisma.BanOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BanInclude<ExtArgs> | null;
  /**
   * Filter, which Ban to fetch.
   */
  where?: Prisma.BanWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Bans to fetch.
   */
  orderBy?: Prisma.BanOrderByWithRelationInput | Prisma.BanOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Bans.
   */
  cursor?: Prisma.BanWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Bans from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Bans.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Bans.
   */
  distinct?: Prisma.BanScalarFieldEnum | Prisma.BanScalarFieldEnum[];
};

/**
 * Ban findFirstOrThrow
 */
export type BanFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Ban
   */
  select?: Prisma.BanSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Ban
   */
  omit?: Prisma.BanOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BanInclude<ExtArgs> | null;
  /**
   * Filter, which Ban to fetch.
   */
  where?: Prisma.BanWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Bans to fetch.
   */
  orderBy?: Prisma.BanOrderByWithRelationInput | Prisma.BanOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Bans.
   */
  cursor?: Prisma.BanWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Bans from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Bans.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Bans.
   */
  distinct?: Prisma.BanScalarFieldEnum | Prisma.BanScalarFieldEnum[];
};

/**
 * Ban findMany
 */
export type BanFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Ban
   */
  select?: Prisma.BanSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Ban
   */
  omit?: Prisma.BanOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BanInclude<ExtArgs> | null;
  /**
   * Filter, which Bans to fetch.
   */
  where?: Prisma.BanWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Bans to fetch.
   */
  orderBy?: Prisma.BanOrderByWithRelationInput | Prisma.BanOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Bans.
   */
  cursor?: Prisma.BanWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Bans from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Bans.
   */
  skip?: number;
  distinct?: Prisma.BanScalarFieldEnum | Prisma.BanScalarFieldEnum[];
};

/**
 * Ban create
 */
export type BanCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Ban
   */
  select?: Prisma.BanSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Ban
   */
  omit?: Prisma.BanOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BanInclude<ExtArgs> | null;
  /**
   * The data needed to create a Ban.
   */
  data: Prisma.XOR<Prisma.BanCreateInput, Prisma.BanUncheckedCreateInput>;
};

/**
 * Ban createMany
 */
export type BanCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many Bans.
   */
  data: Prisma.BanCreateManyInput | Prisma.BanCreateManyInput[];
};

/**
 * Ban createManyAndReturn
 */
export type BanCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Ban
   */
  select?: Prisma.BanSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Ban
   */
  omit?: Prisma.BanOmit<ExtArgs> | null;
  /**
   * The data used to create many Bans.
   */
  data: Prisma.BanCreateManyInput | Prisma.BanCreateManyInput[];
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BanIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Ban update
 */
export type BanUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Ban
   */
  select?: Prisma.BanSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Ban
   */
  omit?: Prisma.BanOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BanInclude<ExtArgs> | null;
  /**
   * The data needed to update a Ban.
   */
  data: Prisma.XOR<Prisma.BanUpdateInput, Prisma.BanUncheckedUpdateInput>;
  /**
   * Choose, which Ban to update.
   */
  where: Prisma.BanWhereUniqueInput;
};

/**
 * Ban updateMany
 */
export type BanUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update Bans.
   */
  data: Prisma.XOR<Prisma.BanUpdateManyMutationInput, Prisma.BanUncheckedUpdateManyInput>;
  /**
   * Filter which Bans to update
   */
  where?: Prisma.BanWhereInput;
  /**
   * Limit how many Bans to update.
   */
  limit?: number;
};

/**
 * Ban updateManyAndReturn
 */
export type BanUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Ban
   */
  select?: Prisma.BanSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Ban
   */
  omit?: Prisma.BanOmit<ExtArgs> | null;
  /**
   * The data used to update Bans.
   */
  data: Prisma.XOR<Prisma.BanUpdateManyMutationInput, Prisma.BanUncheckedUpdateManyInput>;
  /**
   * Filter which Bans to update
   */
  where?: Prisma.BanWhereInput;
  /**
   * Limit how many Bans to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BanIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Ban upsert
 */
export type BanUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Ban
   */
  select?: Prisma.BanSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Ban
   */
  omit?: Prisma.BanOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BanInclude<ExtArgs> | null;
  /**
   * The filter to search for the Ban to update in case it exists.
   */
  where: Prisma.BanWhereUniqueInput;
  /**
   * In case the Ban found by the `where` argument doesn't exist, create a new Ban with this data.
   */
  create: Prisma.XOR<Prisma.BanCreateInput, Prisma.BanUncheckedCreateInput>;
  /**
   * In case the Ban was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BanUpdateInput, Prisma.BanUncheckedUpdateInput>;
};

/**
 * Ban delete
 */
export type BanDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Ban
   */
  select?: Prisma.BanSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Ban
   */
  omit?: Prisma.BanOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BanInclude<ExtArgs> | null;
  /**
   * Filter which Ban to delete.
   */
  where: Prisma.BanWhereUniqueInput;
};

/**
 * Ban deleteMany
 */
export type BanDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Bans to delete
   */
  where?: Prisma.BanWhereInput;
  /**
   * Limit how many Bans to delete.
   */
  limit?: number;
};

/**
 * Ban without action
 */
export type BanDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Ban
   */
  select?: Prisma.BanSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Ban
   */
  omit?: Prisma.BanOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BanInclude<ExtArgs> | null;
};
