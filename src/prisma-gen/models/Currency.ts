/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Currency` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from "../pjtg";
import * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Currency
 *
 */
export type CurrencyModel = runtime.Types.Result.DefaultSelection<Prisma.$CurrencyPayload>;

export type AggregateCurrency = {
  _count: CurrencyCountAggregateOutputType | null;
  _avg: CurrencyAvgAggregateOutputType | null;
  _sum: CurrencySumAggregateOutputType | null;
  _min: CurrencyMinAggregateOutputType | null;
  _max: CurrencyMaxAggregateOutputType | null;
};

export type CurrencyAvgAggregateOutputType = {
  rate: number | null;
  withdrawalCharge: number | null;
};

export type CurrencySumAggregateOutputType = {
  rate: number | null;
  withdrawalCharge: number | null;
};

export type CurrencyMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  symbol: string | null;
  abbr: string | null;
  image: string | null;
  rate: number | null;
  rateUpdatedAt: Date | null;
  walletAddress: string | null;
  walletAddressNetwork: string | null;
  isAvailableForWithdrawal: boolean | null;
  withdrawalCharge: number | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type CurrencyMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  symbol: string | null;
  abbr: string | null;
  image: string | null;
  rate: number | null;
  rateUpdatedAt: Date | null;
  walletAddress: string | null;
  walletAddressNetwork: string | null;
  isAvailableForWithdrawal: boolean | null;
  withdrawalCharge: number | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type CurrencyCountAggregateOutputType = {
  id: number;
  name: number;
  symbol: number;
  abbr: number;
  image: number;
  rate: number;
  rateUpdatedAt: number;
  walletAddress: number;
  walletAddressNetwork: number;
  isAvailableForWithdrawal: number;
  withdrawalCharge: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type CurrencyAvgAggregateInputType = {
  rate?: true;
  withdrawalCharge?: true;
};

export type CurrencySumAggregateInputType = {
  rate?: true;
  withdrawalCharge?: true;
};

export type CurrencyMinAggregateInputType = {
  id?: true;
  name?: true;
  symbol?: true;
  abbr?: true;
  image?: true;
  rate?: true;
  rateUpdatedAt?: true;
  walletAddress?: true;
  walletAddressNetwork?: true;
  isAvailableForWithdrawal?: true;
  withdrawalCharge?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type CurrencyMaxAggregateInputType = {
  id?: true;
  name?: true;
  symbol?: true;
  abbr?: true;
  image?: true;
  rate?: true;
  rateUpdatedAt?: true;
  walletAddress?: true;
  walletAddressNetwork?: true;
  isAvailableForWithdrawal?: true;
  withdrawalCharge?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type CurrencyCountAggregateInputType = {
  id?: true;
  name?: true;
  symbol?: true;
  abbr?: true;
  image?: true;
  rate?: true;
  rateUpdatedAt?: true;
  walletAddress?: true;
  walletAddressNetwork?: true;
  isAvailableForWithdrawal?: true;
  withdrawalCharge?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type CurrencyAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Currency to aggregate.
   */
  where?: Prisma.CurrencyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Currencies to fetch.
   */
  orderBy?: Prisma.CurrencyOrderByWithRelationInput | Prisma.CurrencyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.CurrencyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Currencies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Currencies.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Currencies
   **/
  _count?: true | CurrencyCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: CurrencyAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: CurrencySumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: CurrencyMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: CurrencyMaxAggregateInputType;
};

export type GetCurrencyAggregateType<T extends CurrencyAggregateArgs> = {
  [P in keyof T & keyof AggregateCurrency]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCurrency[P]>
    : Prisma.GetScalarType<T[P], AggregateCurrency[P]>;
};

export type CurrencyGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.CurrencyWhereInput;
  orderBy?:
    | Prisma.CurrencyOrderByWithAggregationInput
    | Prisma.CurrencyOrderByWithAggregationInput[];
  by: Prisma.CurrencyScalarFieldEnum[] | Prisma.CurrencyScalarFieldEnum;
  having?: Prisma.CurrencyScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: CurrencyCountAggregateInputType | true;
  _avg?: CurrencyAvgAggregateInputType;
  _sum?: CurrencySumAggregateInputType;
  _min?: CurrencyMinAggregateInputType;
  _max?: CurrencyMaxAggregateInputType;
};

export type CurrencyGroupByOutputType = {
  id: string;
  name: string;
  symbol: string;
  abbr: string;
  image: string | null;
  rate: number;
  rateUpdatedAt: Date | null;
  walletAddress: string;
  walletAddressNetwork: string | null;
  isAvailableForWithdrawal: boolean;
  withdrawalCharge: number;
  createdAt: Date;
  updatedAt: Date;
  _count: CurrencyCountAggregateOutputType | null;
  _avg: CurrencyAvgAggregateOutputType | null;
  _sum: CurrencySumAggregateOutputType | null;
  _min: CurrencyMinAggregateOutputType | null;
  _max: CurrencyMaxAggregateOutputType | null;
};

type GetCurrencyGroupByPayload<T extends CurrencyGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CurrencyGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof CurrencyGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], CurrencyGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], CurrencyGroupByOutputType[P]>;
    }
  >
>;

export type CurrencyWhereInput = {
  AND?: Prisma.CurrencyWhereInput | Prisma.CurrencyWhereInput[];
  OR?: Prisma.CurrencyWhereInput[];
  NOT?: Prisma.CurrencyWhereInput | Prisma.CurrencyWhereInput[];
  id?: Prisma.StringFilter<"Currency"> | string;
  name?: Prisma.StringFilter<"Currency"> | string;
  symbol?: Prisma.StringFilter<"Currency"> | string;
  abbr?: Prisma.StringFilter<"Currency"> | string;
  image?: Prisma.StringNullableFilter<"Currency"> | string | null;
  rate?: Prisma.FloatFilter<"Currency"> | number;
  rateUpdatedAt?: Prisma.DateTimeNullableFilter<"Currency"> | Date | string | null;
  walletAddress?: Prisma.StringFilter<"Currency"> | string;
  walletAddressNetwork?: Prisma.StringNullableFilter<"Currency"> | string | null;
  isAvailableForWithdrawal?: Prisma.BoolFilter<"Currency"> | boolean;
  withdrawalCharge?: Prisma.FloatFilter<"Currency"> | number;
  createdAt?: Prisma.DateTimeFilter<"Currency"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Currency"> | Date | string;
};

export type CurrencyOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  symbol?: Prisma.SortOrder;
  abbr?: Prisma.SortOrder;
  image?: Prisma.SortOrderInput | Prisma.SortOrder;
  rate?: Prisma.SortOrder;
  rateUpdatedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  walletAddress?: Prisma.SortOrder;
  walletAddressNetwork?: Prisma.SortOrderInput | Prisma.SortOrder;
  isAvailableForWithdrawal?: Prisma.SortOrder;
  withdrawalCharge?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type CurrencyWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    abbr?: string;
    AND?: Prisma.CurrencyWhereInput | Prisma.CurrencyWhereInput[];
    OR?: Prisma.CurrencyWhereInput[];
    NOT?: Prisma.CurrencyWhereInput | Prisma.CurrencyWhereInput[];
    name?: Prisma.StringFilter<"Currency"> | string;
    symbol?: Prisma.StringFilter<"Currency"> | string;
    image?: Prisma.StringNullableFilter<"Currency"> | string | null;
    rate?: Prisma.FloatFilter<"Currency"> | number;
    rateUpdatedAt?: Prisma.DateTimeNullableFilter<"Currency"> | Date | string | null;
    walletAddress?: Prisma.StringFilter<"Currency"> | string;
    walletAddressNetwork?: Prisma.StringNullableFilter<"Currency"> | string | null;
    isAvailableForWithdrawal?: Prisma.BoolFilter<"Currency"> | boolean;
    withdrawalCharge?: Prisma.FloatFilter<"Currency"> | number;
    createdAt?: Prisma.DateTimeFilter<"Currency"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"Currency"> | Date | string;
  },
  "id" | "abbr"
>;

export type CurrencyOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  symbol?: Prisma.SortOrder;
  abbr?: Prisma.SortOrder;
  image?: Prisma.SortOrderInput | Prisma.SortOrder;
  rate?: Prisma.SortOrder;
  rateUpdatedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  walletAddress?: Prisma.SortOrder;
  walletAddressNetwork?: Prisma.SortOrderInput | Prisma.SortOrder;
  isAvailableForWithdrawal?: Prisma.SortOrder;
  withdrawalCharge?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.CurrencyCountOrderByAggregateInput;
  _avg?: Prisma.CurrencyAvgOrderByAggregateInput;
  _max?: Prisma.CurrencyMaxOrderByAggregateInput;
  _min?: Prisma.CurrencyMinOrderByAggregateInput;
  _sum?: Prisma.CurrencySumOrderByAggregateInput;
};

export type CurrencyScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.CurrencyScalarWhereWithAggregatesInput
    | Prisma.CurrencyScalarWhereWithAggregatesInput[];
  OR?: Prisma.CurrencyScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.CurrencyScalarWhereWithAggregatesInput
    | Prisma.CurrencyScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"Currency"> | string;
  name?: Prisma.StringWithAggregatesFilter<"Currency"> | string;
  symbol?: Prisma.StringWithAggregatesFilter<"Currency"> | string;
  abbr?: Prisma.StringWithAggregatesFilter<"Currency"> | string;
  image?: Prisma.StringNullableWithAggregatesFilter<"Currency"> | string | null;
  rate?: Prisma.FloatWithAggregatesFilter<"Currency"> | number;
  rateUpdatedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Currency"> | Date | string | null;
  walletAddress?: Prisma.StringWithAggregatesFilter<"Currency"> | string;
  walletAddressNetwork?: Prisma.StringNullableWithAggregatesFilter<"Currency"> | string | null;
  isAvailableForWithdrawal?: Prisma.BoolWithAggregatesFilter<"Currency"> | boolean;
  withdrawalCharge?: Prisma.FloatWithAggregatesFilter<"Currency"> | number;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Currency"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Currency"> | Date | string;
};

export type CurrencyCreateInput = {
  id?: string;
  name: string;
  symbol: string;
  abbr: string;
  image?: string | null;
  rate: number;
  rateUpdatedAt?: Date | string | null;
  walletAddress: string;
  walletAddressNetwork?: string | null;
  isAvailableForWithdrawal?: boolean;
  withdrawalCharge?: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type CurrencyUncheckedCreateInput = {
  id?: string;
  name: string;
  symbol: string;
  abbr: string;
  image?: string | null;
  rate: number;
  rateUpdatedAt?: Date | string | null;
  walletAddress: string;
  walletAddressNetwork?: string | null;
  isAvailableForWithdrawal?: boolean;
  withdrawalCharge?: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type CurrencyUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  symbol?: Prisma.StringFieldUpdateOperationsInput | string;
  abbr?: Prisma.StringFieldUpdateOperationsInput | string;
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  rate?: Prisma.FloatFieldUpdateOperationsInput | number;
  rateUpdatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  walletAddress?: Prisma.StringFieldUpdateOperationsInput | string;
  walletAddressNetwork?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isAvailableForWithdrawal?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  withdrawalCharge?: Prisma.FloatFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CurrencyUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  symbol?: Prisma.StringFieldUpdateOperationsInput | string;
  abbr?: Prisma.StringFieldUpdateOperationsInput | string;
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  rate?: Prisma.FloatFieldUpdateOperationsInput | number;
  rateUpdatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  walletAddress?: Prisma.StringFieldUpdateOperationsInput | string;
  walletAddressNetwork?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isAvailableForWithdrawal?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  withdrawalCharge?: Prisma.FloatFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CurrencyCreateManyInput = {
  id?: string;
  name: string;
  symbol: string;
  abbr: string;
  image?: string | null;
  rate: number;
  rateUpdatedAt?: Date | string | null;
  walletAddress: string;
  walletAddressNetwork?: string | null;
  isAvailableForWithdrawal?: boolean;
  withdrawalCharge?: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type CurrencyUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  symbol?: Prisma.StringFieldUpdateOperationsInput | string;
  abbr?: Prisma.StringFieldUpdateOperationsInput | string;
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  rate?: Prisma.FloatFieldUpdateOperationsInput | number;
  rateUpdatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  walletAddress?: Prisma.StringFieldUpdateOperationsInput | string;
  walletAddressNetwork?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isAvailableForWithdrawal?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  withdrawalCharge?: Prisma.FloatFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CurrencyUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  symbol?: Prisma.StringFieldUpdateOperationsInput | string;
  abbr?: Prisma.StringFieldUpdateOperationsInput | string;
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  rate?: Prisma.FloatFieldUpdateOperationsInput | number;
  rateUpdatedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  walletAddress?: Prisma.StringFieldUpdateOperationsInput | string;
  walletAddressNetwork?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isAvailableForWithdrawal?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  withdrawalCharge?: Prisma.FloatFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CurrencyCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  symbol?: Prisma.SortOrder;
  abbr?: Prisma.SortOrder;
  image?: Prisma.SortOrder;
  rate?: Prisma.SortOrder;
  rateUpdatedAt?: Prisma.SortOrder;
  walletAddress?: Prisma.SortOrder;
  walletAddressNetwork?: Prisma.SortOrder;
  isAvailableForWithdrawal?: Prisma.SortOrder;
  withdrawalCharge?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type CurrencyAvgOrderByAggregateInput = {
  rate?: Prisma.SortOrder;
  withdrawalCharge?: Prisma.SortOrder;
};

export type CurrencyMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  symbol?: Prisma.SortOrder;
  abbr?: Prisma.SortOrder;
  image?: Prisma.SortOrder;
  rate?: Prisma.SortOrder;
  rateUpdatedAt?: Prisma.SortOrder;
  walletAddress?: Prisma.SortOrder;
  walletAddressNetwork?: Prisma.SortOrder;
  isAvailableForWithdrawal?: Prisma.SortOrder;
  withdrawalCharge?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type CurrencyMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  symbol?: Prisma.SortOrder;
  abbr?: Prisma.SortOrder;
  image?: Prisma.SortOrder;
  rate?: Prisma.SortOrder;
  rateUpdatedAt?: Prisma.SortOrder;
  walletAddress?: Prisma.SortOrder;
  walletAddressNetwork?: Prisma.SortOrder;
  isAvailableForWithdrawal?: Prisma.SortOrder;
  withdrawalCharge?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type CurrencySumOrderByAggregateInput = {
  rate?: Prisma.SortOrder;
  withdrawalCharge?: Prisma.SortOrder;
};

export type CurrencySelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    symbol?: boolean;
    abbr?: boolean;
    image?: boolean;
    rate?: boolean;
    rateUpdatedAt?: boolean;
    walletAddress?: boolean;
    walletAddressNetwork?: boolean;
    isAvailableForWithdrawal?: boolean;
    withdrawalCharge?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs["result"]["currency"]
>;

export type CurrencySelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    symbol?: boolean;
    abbr?: boolean;
    image?: boolean;
    rate?: boolean;
    rateUpdatedAt?: boolean;
    walletAddress?: boolean;
    walletAddressNetwork?: boolean;
    isAvailableForWithdrawal?: boolean;
    withdrawalCharge?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs["result"]["currency"]
>;

export type CurrencySelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    symbol?: boolean;
    abbr?: boolean;
    image?: boolean;
    rate?: boolean;
    rateUpdatedAt?: boolean;
    walletAddress?: boolean;
    walletAddressNetwork?: boolean;
    isAvailableForWithdrawal?: boolean;
    withdrawalCharge?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs["result"]["currency"]
>;

export type CurrencySelectScalar = {
  id?: boolean;
  name?: boolean;
  symbol?: boolean;
  abbr?: boolean;
  image?: boolean;
  rate?: boolean;
  rateUpdatedAt?: boolean;
  walletAddress?: boolean;
  walletAddressNetwork?: boolean;
  isAvailableForWithdrawal?: boolean;
  withdrawalCharge?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type CurrencyOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "name"
  | "symbol"
  | "abbr"
  | "image"
  | "rate"
  | "rateUpdatedAt"
  | "walletAddress"
  | "walletAddressNetwork"
  | "isAvailableForWithdrawal"
  | "withdrawalCharge"
  | "createdAt"
  | "updatedAt",
  ExtArgs["result"]["currency"]
>;

export type $CurrencyPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "Currency";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      symbol: string;
      abbr: string;
      image: string | null;
      rate: number;
      rateUpdatedAt: Date | null;
      walletAddress: string;
      walletAddressNetwork: string | null;
      isAvailableForWithdrawal: boolean;
      withdrawalCharge: number;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["currency"]
  >;
  composites: {};
};

export type CurrencyGetPayload<S extends boolean | null | undefined | CurrencyDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$CurrencyPayload, S>;

export type CurrencyCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<CurrencyFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: CurrencyCountAggregateInputType | true;
};

export interface CurrencyDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["Currency"]; meta: { name: "Currency" } };
  /**
   * Find zero or one Currency that matches the filter.
   * @param {CurrencyFindUniqueArgs} args - Arguments to find a Currency
   * @example
   * // Get one Currency
   * const currency = await prisma.currency.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CurrencyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, CurrencyFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__CurrencyClient<
    runtime.Types.Result.GetResult<
      Prisma.$CurrencyPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Currency that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CurrencyFindUniqueOrThrowArgs} args - Arguments to find a Currency
   * @example
   * // Get one Currency
   * const currency = await prisma.currency.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CurrencyFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, CurrencyFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__CurrencyClient<
    runtime.Types.Result.GetResult<
      Prisma.$CurrencyPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Currency that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CurrencyFindFirstArgs} args - Arguments to find a Currency
   * @example
   * // Get one Currency
   * const currency = await prisma.currency.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CurrencyFindFirstArgs>(
    args?: Prisma.SelectSubset<T, CurrencyFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__CurrencyClient<
    runtime.Types.Result.GetResult<
      Prisma.$CurrencyPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Currency that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CurrencyFindFirstOrThrowArgs} args - Arguments to find a Currency
   * @example
   * // Get one Currency
   * const currency = await prisma.currency.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CurrencyFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, CurrencyFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__CurrencyClient<
    runtime.Types.Result.GetResult<
      Prisma.$CurrencyPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Currencies that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CurrencyFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Currencies
   * const currencies = await prisma.currency.findMany()
   *
   * // Get first 10 Currencies
   * const currencies = await prisma.currency.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const currencyWithIdOnly = await prisma.currency.findMany({ select: { id: true } })
   *
   */
  findMany<T extends CurrencyFindManyArgs>(
    args?: Prisma.SelectSubset<T, CurrencyFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CurrencyPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Currency.
   * @param {CurrencyCreateArgs} args - Arguments to create a Currency.
   * @example
   * // Create one Currency
   * const Currency = await prisma.currency.create({
   *   data: {
   *     // ... data to create a Currency
   *   }
   * })
   *
   */
  create<T extends CurrencyCreateArgs>(
    args: Prisma.SelectSubset<T, CurrencyCreateArgs<ExtArgs>>
  ): Prisma.Prisma__CurrencyClient<
    runtime.Types.Result.GetResult<
      Prisma.$CurrencyPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Currencies.
   * @param {CurrencyCreateManyArgs} args - Arguments to create many Currencies.
   * @example
   * // Create many Currencies
   * const currency = await prisma.currency.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends CurrencyCreateManyArgs>(
    args?: Prisma.SelectSubset<T, CurrencyCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Currencies and returns the data saved in the database.
   * @param {CurrencyCreateManyAndReturnArgs} args - Arguments to create many Currencies.
   * @example
   * // Create many Currencies
   * const currency = await prisma.currency.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Currencies and only return the `id`
   * const currencyWithIdOnly = await prisma.currency.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends CurrencyCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, CurrencyCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CurrencyPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Currency.
   * @param {CurrencyDeleteArgs} args - Arguments to delete one Currency.
   * @example
   * // Delete one Currency
   * const Currency = await prisma.currency.delete({
   *   where: {
   *     // ... filter to delete one Currency
   *   }
   * })
   *
   */
  delete<T extends CurrencyDeleteArgs>(
    args: Prisma.SelectSubset<T, CurrencyDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__CurrencyClient<
    runtime.Types.Result.GetResult<
      Prisma.$CurrencyPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Currency.
   * @param {CurrencyUpdateArgs} args - Arguments to update one Currency.
   * @example
   * // Update one Currency
   * const currency = await prisma.currency.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends CurrencyUpdateArgs>(
    args: Prisma.SelectSubset<T, CurrencyUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__CurrencyClient<
    runtime.Types.Result.GetResult<
      Prisma.$CurrencyPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Currencies.
   * @param {CurrencyDeleteManyArgs} args - Arguments to filter Currencies to delete.
   * @example
   * // Delete a few Currencies
   * const { count } = await prisma.currency.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends CurrencyDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, CurrencyDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Currencies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CurrencyUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Currencies
   * const currency = await prisma.currency.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends CurrencyUpdateManyArgs>(
    args: Prisma.SelectSubset<T, CurrencyUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Currencies and returns the data updated in the database.
   * @param {CurrencyUpdateManyAndReturnArgs} args - Arguments to update many Currencies.
   * @example
   * // Update many Currencies
   * const currency = await prisma.currency.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Currencies and only return the `id`
   * const currencyWithIdOnly = await prisma.currency.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends CurrencyUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, CurrencyUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CurrencyPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Currency.
   * @param {CurrencyUpsertArgs} args - Arguments to update or create a Currency.
   * @example
   * // Update or create a Currency
   * const currency = await prisma.currency.upsert({
   *   create: {
   *     // ... data to create a Currency
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Currency we want to update
   *   }
   * })
   */
  upsert<T extends CurrencyUpsertArgs>(
    args: Prisma.SelectSubset<T, CurrencyUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__CurrencyClient<
    runtime.Types.Result.GetResult<
      Prisma.$CurrencyPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Currencies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CurrencyCountArgs} args - Arguments to filter Currencies to count.
   * @example
   * // Count the number of Currencies
   * const count = await prisma.currency.count({
   *   where: {
   *     // ... the filter for the Currencies we want to count
   *   }
   * })
   **/
  count<T extends CurrencyCountArgs>(
    args?: Prisma.Subset<T, CurrencyCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], CurrencyCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Currency.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CurrencyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends CurrencyAggregateArgs>(
    args: Prisma.Subset<T, CurrencyAggregateArgs>
  ): Prisma.PrismaPromise<GetCurrencyAggregateType<T>>;

  /**
   * Group by Currency.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CurrencyGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends CurrencyGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CurrencyGroupByArgs["orderBy"] }
      : { orderBy?: CurrencyGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, CurrencyGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetCurrencyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Currency model
   */
  readonly fields: CurrencyFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Currency.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CurrencyClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Currency model
 */
export interface CurrencyFieldRefs {
  readonly id: Prisma.FieldRef<"Currency", "String">;
  readonly name: Prisma.FieldRef<"Currency", "String">;
  readonly symbol: Prisma.FieldRef<"Currency", "String">;
  readonly abbr: Prisma.FieldRef<"Currency", "String">;
  readonly image: Prisma.FieldRef<"Currency", "String">;
  readonly rate: Prisma.FieldRef<"Currency", "Float">;
  readonly rateUpdatedAt: Prisma.FieldRef<"Currency", "DateTime">;
  readonly walletAddress: Prisma.FieldRef<"Currency", "String">;
  readonly walletAddressNetwork: Prisma.FieldRef<"Currency", "String">;
  readonly isAvailableForWithdrawal: Prisma.FieldRef<"Currency", "Boolean">;
  readonly withdrawalCharge: Prisma.FieldRef<"Currency", "Float">;
  readonly createdAt: Prisma.FieldRef<"Currency", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"Currency", "DateTime">;
}

// Custom InputTypes
/**
 * Currency findUnique
 */
export type CurrencyFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Currency
   */
  select?: Prisma.CurrencySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Currency
   */
  omit?: Prisma.CurrencyOmit<ExtArgs> | null;
  /**
   * Filter, which Currency to fetch.
   */
  where: Prisma.CurrencyWhereUniqueInput;
};

/**
 * Currency findUniqueOrThrow
 */
export type CurrencyFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Currency
   */
  select?: Prisma.CurrencySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Currency
   */
  omit?: Prisma.CurrencyOmit<ExtArgs> | null;
  /**
   * Filter, which Currency to fetch.
   */
  where: Prisma.CurrencyWhereUniqueInput;
};

/**
 * Currency findFirst
 */
export type CurrencyFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Currency
   */
  select?: Prisma.CurrencySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Currency
   */
  omit?: Prisma.CurrencyOmit<ExtArgs> | null;
  /**
   * Filter, which Currency to fetch.
   */
  where?: Prisma.CurrencyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Currencies to fetch.
   */
  orderBy?: Prisma.CurrencyOrderByWithRelationInput | Prisma.CurrencyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Currencies.
   */
  cursor?: Prisma.CurrencyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Currencies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Currencies.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Currencies.
   */
  distinct?: Prisma.CurrencyScalarFieldEnum | Prisma.CurrencyScalarFieldEnum[];
};

/**
 * Currency findFirstOrThrow
 */
export type CurrencyFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Currency
   */
  select?: Prisma.CurrencySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Currency
   */
  omit?: Prisma.CurrencyOmit<ExtArgs> | null;
  /**
   * Filter, which Currency to fetch.
   */
  where?: Prisma.CurrencyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Currencies to fetch.
   */
  orderBy?: Prisma.CurrencyOrderByWithRelationInput | Prisma.CurrencyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Currencies.
   */
  cursor?: Prisma.CurrencyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Currencies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Currencies.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Currencies.
   */
  distinct?: Prisma.CurrencyScalarFieldEnum | Prisma.CurrencyScalarFieldEnum[];
};

/**
 * Currency findMany
 */
export type CurrencyFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Currency
   */
  select?: Prisma.CurrencySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Currency
   */
  omit?: Prisma.CurrencyOmit<ExtArgs> | null;
  /**
   * Filter, which Currencies to fetch.
   */
  where?: Prisma.CurrencyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Currencies to fetch.
   */
  orderBy?: Prisma.CurrencyOrderByWithRelationInput | Prisma.CurrencyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Currencies.
   */
  cursor?: Prisma.CurrencyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Currencies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Currencies.
   */
  skip?: number;
  distinct?: Prisma.CurrencyScalarFieldEnum | Prisma.CurrencyScalarFieldEnum[];
};

/**
 * Currency create
 */
export type CurrencyCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Currency
   */
  select?: Prisma.CurrencySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Currency
   */
  omit?: Prisma.CurrencyOmit<ExtArgs> | null;
  /**
   * The data needed to create a Currency.
   */
  data: Prisma.XOR<Prisma.CurrencyCreateInput, Prisma.CurrencyUncheckedCreateInput>;
};

/**
 * Currency createMany
 */
export type CurrencyCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many Currencies.
   */
  data: Prisma.CurrencyCreateManyInput | Prisma.CurrencyCreateManyInput[];
};

/**
 * Currency createManyAndReturn
 */
export type CurrencyCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Currency
   */
  select?: Prisma.CurrencySelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Currency
   */
  omit?: Prisma.CurrencyOmit<ExtArgs> | null;
  /**
   * The data used to create many Currencies.
   */
  data: Prisma.CurrencyCreateManyInput | Prisma.CurrencyCreateManyInput[];
};

/**
 * Currency update
 */
export type CurrencyUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Currency
   */
  select?: Prisma.CurrencySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Currency
   */
  omit?: Prisma.CurrencyOmit<ExtArgs> | null;
  /**
   * The data needed to update a Currency.
   */
  data: Prisma.XOR<Prisma.CurrencyUpdateInput, Prisma.CurrencyUncheckedUpdateInput>;
  /**
   * Choose, which Currency to update.
   */
  where: Prisma.CurrencyWhereUniqueInput;
};

/**
 * Currency updateMany
 */
export type CurrencyUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update Currencies.
   */
  data: Prisma.XOR<Prisma.CurrencyUpdateManyMutationInput, Prisma.CurrencyUncheckedUpdateManyInput>;
  /**
   * Filter which Currencies to update
   */
  where?: Prisma.CurrencyWhereInput;
  /**
   * Limit how many Currencies to update.
   */
  limit?: number;
};

/**
 * Currency updateManyAndReturn
 */
export type CurrencyUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Currency
   */
  select?: Prisma.CurrencySelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Currency
   */
  omit?: Prisma.CurrencyOmit<ExtArgs> | null;
  /**
   * The data used to update Currencies.
   */
  data: Prisma.XOR<Prisma.CurrencyUpdateManyMutationInput, Prisma.CurrencyUncheckedUpdateManyInput>;
  /**
   * Filter which Currencies to update
   */
  where?: Prisma.CurrencyWhereInput;
  /**
   * Limit how many Currencies to update.
   */
  limit?: number;
};

/**
 * Currency upsert
 */
export type CurrencyUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Currency
   */
  select?: Prisma.CurrencySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Currency
   */
  omit?: Prisma.CurrencyOmit<ExtArgs> | null;
  /**
   * The filter to search for the Currency to update in case it exists.
   */
  where: Prisma.CurrencyWhereUniqueInput;
  /**
   * In case the Currency found by the `where` argument doesn't exist, create a new Currency with this data.
   */
  create: Prisma.XOR<Prisma.CurrencyCreateInput, Prisma.CurrencyUncheckedCreateInput>;
  /**
   * In case the Currency was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CurrencyUpdateInput, Prisma.CurrencyUncheckedUpdateInput>;
};

/**
 * Currency delete
 */
export type CurrencyDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Currency
   */
  select?: Prisma.CurrencySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Currency
   */
  omit?: Prisma.CurrencyOmit<ExtArgs> | null;
  /**
   * Filter which Currency to delete.
   */
  where: Prisma.CurrencyWhereUniqueInput;
};

/**
 * Currency deleteMany
 */
export type CurrencyDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Currencies to delete
   */
  where?: Prisma.CurrencyWhereInput;
  /**
   * Limit how many Currencies to delete.
   */
  limit?: number;
};

/**
 * Currency without action
 */
export type CurrencyDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Currency
   */
  select?: Prisma.CurrencySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Currency
   */
  omit?: Prisma.CurrencyOmit<ExtArgs> | null;
};
