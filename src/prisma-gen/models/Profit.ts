/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Profit` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from "../pjtg";
import * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Profit
 *
 */
export type ProfitModel = runtime.Types.Result.DefaultSelection<Prisma.$ProfitPayload>;

export type AggregateProfit = {
  _count: ProfitCountAggregateOutputType | null;
  _avg: ProfitAvgAggregateOutputType | null;
  _sum: ProfitSumAggregateOutputType | null;
  _min: ProfitMinAggregateOutputType | null;
  _max: ProfitMaxAggregateOutputType | null;
};

export type ProfitAvgAggregateOutputType = {
  amount: number | null;
};

export type ProfitSumAggregateOutputType = {
  amount: number | null;
};

export type ProfitMinAggregateOutputType = {
  id: string | null;
  userId: string | null;
  accountId: string | null;
  investmentId: string | null;
  amount: number | null;
  status: $Enums.ProfitStatus | null;
  distributedAt: Date | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type ProfitMaxAggregateOutputType = {
  id: string | null;
  userId: string | null;
  accountId: string | null;
  investmentId: string | null;
  amount: number | null;
  status: $Enums.ProfitStatus | null;
  distributedAt: Date | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type ProfitCountAggregateOutputType = {
  id: number;
  userId: number;
  accountId: number;
  investmentId: number;
  amount: number;
  status: number;
  distributedAt: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type ProfitAvgAggregateInputType = {
  amount?: true;
};

export type ProfitSumAggregateInputType = {
  amount?: true;
};

export type ProfitMinAggregateInputType = {
  id?: true;
  userId?: true;
  accountId?: true;
  investmentId?: true;
  amount?: true;
  status?: true;
  distributedAt?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type ProfitMaxAggregateInputType = {
  id?: true;
  userId?: true;
  accountId?: true;
  investmentId?: true;
  amount?: true;
  status?: true;
  distributedAt?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type ProfitCountAggregateInputType = {
  id?: true;
  userId?: true;
  accountId?: true;
  investmentId?: true;
  amount?: true;
  status?: true;
  distributedAt?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type ProfitAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Profit to aggregate.
   */
  where?: Prisma.ProfitWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Profits to fetch.
   */
  orderBy?: Prisma.ProfitOrderByWithRelationInput | Prisma.ProfitOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ProfitWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Profits from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Profits.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Profits
   **/
  _count?: true | ProfitCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ProfitAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ProfitSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ProfitMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ProfitMaxAggregateInputType;
};

export type GetProfitAggregateType<T extends ProfitAggregateArgs> = {
  [P in keyof T & keyof AggregateProfit]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProfit[P]>
    : Prisma.GetScalarType<T[P], AggregateProfit[P]>;
};

export type ProfitGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.ProfitWhereInput;
  orderBy?: Prisma.ProfitOrderByWithAggregationInput | Prisma.ProfitOrderByWithAggregationInput[];
  by: Prisma.ProfitScalarFieldEnum[] | Prisma.ProfitScalarFieldEnum;
  having?: Prisma.ProfitScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ProfitCountAggregateInputType | true;
  _avg?: ProfitAvgAggregateInputType;
  _sum?: ProfitSumAggregateInputType;
  _min?: ProfitMinAggregateInputType;
  _max?: ProfitMaxAggregateInputType;
};

export type ProfitGroupByOutputType = {
  id: string;
  userId: string;
  accountId: string | null;
  investmentId: string | null;
  amount: number;
  status: $Enums.ProfitStatus;
  distributedAt: Date | null;
  createdAt: Date;
  updatedAt: Date;
  _count: ProfitCountAggregateOutputType | null;
  _avg: ProfitAvgAggregateOutputType | null;
  _sum: ProfitSumAggregateOutputType | null;
  _min: ProfitMinAggregateOutputType | null;
  _max: ProfitMaxAggregateOutputType | null;
};

type GetProfitGroupByPayload<T extends ProfitGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProfitGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof ProfitGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], ProfitGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], ProfitGroupByOutputType[P]>;
    }
  >
>;

export type ProfitWhereInput = {
  AND?: Prisma.ProfitWhereInput | Prisma.ProfitWhereInput[];
  OR?: Prisma.ProfitWhereInput[];
  NOT?: Prisma.ProfitWhereInput | Prisma.ProfitWhereInput[];
  id?: Prisma.StringFilter<"Profit"> | string;
  userId?: Prisma.StringFilter<"Profit"> | string;
  accountId?: Prisma.StringNullableFilter<"Profit"> | string | null;
  investmentId?: Prisma.StringNullableFilter<"Profit"> | string | null;
  amount?: Prisma.FloatFilter<"Profit"> | number;
  status?: Prisma.EnumProfitStatusFilter<"Profit"> | $Enums.ProfitStatus;
  distributedAt?: Prisma.DateTimeNullableFilter<"Profit"> | Date | string | null;
  createdAt?: Prisma.DateTimeFilter<"Profit"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Profit"> | Date | string;
  Investment?: Prisma.XOR<
    Prisma.InvestmentNullableScalarRelationFilter,
    Prisma.InvestmentWhereInput
  > | null;
};

export type ProfitOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  accountId?: Prisma.SortOrderInput | Prisma.SortOrder;
  investmentId?: Prisma.SortOrderInput | Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  distributedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  Investment?: Prisma.InvestmentOrderByWithRelationInput;
};

export type ProfitWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.ProfitWhereInput | Prisma.ProfitWhereInput[];
    OR?: Prisma.ProfitWhereInput[];
    NOT?: Prisma.ProfitWhereInput | Prisma.ProfitWhereInput[];
    userId?: Prisma.StringFilter<"Profit"> | string;
    accountId?: Prisma.StringNullableFilter<"Profit"> | string | null;
    investmentId?: Prisma.StringNullableFilter<"Profit"> | string | null;
    amount?: Prisma.FloatFilter<"Profit"> | number;
    status?: Prisma.EnumProfitStatusFilter<"Profit"> | $Enums.ProfitStatus;
    distributedAt?: Prisma.DateTimeNullableFilter<"Profit"> | Date | string | null;
    createdAt?: Prisma.DateTimeFilter<"Profit"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"Profit"> | Date | string;
    Investment?: Prisma.XOR<
      Prisma.InvestmentNullableScalarRelationFilter,
      Prisma.InvestmentWhereInput
    > | null;
  },
  "id"
>;

export type ProfitOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  accountId?: Prisma.SortOrderInput | Prisma.SortOrder;
  investmentId?: Prisma.SortOrderInput | Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  distributedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.ProfitCountOrderByAggregateInput;
  _avg?: Prisma.ProfitAvgOrderByAggregateInput;
  _max?: Prisma.ProfitMaxOrderByAggregateInput;
  _min?: Prisma.ProfitMinOrderByAggregateInput;
  _sum?: Prisma.ProfitSumOrderByAggregateInput;
};

export type ProfitScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProfitScalarWhereWithAggregatesInput | Prisma.ProfitScalarWhereWithAggregatesInput[];
  OR?: Prisma.ProfitScalarWhereWithAggregatesInput[];
  NOT?: Prisma.ProfitScalarWhereWithAggregatesInput | Prisma.ProfitScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"Profit"> | string;
  userId?: Prisma.StringWithAggregatesFilter<"Profit"> | string;
  accountId?: Prisma.StringNullableWithAggregatesFilter<"Profit"> | string | null;
  investmentId?: Prisma.StringNullableWithAggregatesFilter<"Profit"> | string | null;
  amount?: Prisma.FloatWithAggregatesFilter<"Profit"> | number;
  status?: Prisma.EnumProfitStatusWithAggregatesFilter<"Profit"> | $Enums.ProfitStatus;
  distributedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Profit"> | Date | string | null;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Profit"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Profit"> | Date | string;
};

export type ProfitCreateInput = {
  id?: string;
  userId: string;
  accountId?: string | null;
  amount: number;
  status?: $Enums.ProfitStatus;
  distributedAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  Investment?: Prisma.InvestmentCreateNestedOneWithoutProfitsInput;
};

export type ProfitUncheckedCreateInput = {
  id?: string;
  userId: string;
  accountId?: string | null;
  investmentId?: string | null;
  amount: number;
  status?: $Enums.ProfitStatus;
  distributedAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ProfitUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  accountId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  status?: Prisma.EnumProfitStatusFieldUpdateOperationsInput | $Enums.ProfitStatus;
  distributedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  Investment?: Prisma.InvestmentUpdateOneWithoutProfitsNestedInput;
};

export type ProfitUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  accountId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  investmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  status?: Prisma.EnumProfitStatusFieldUpdateOperationsInput | $Enums.ProfitStatus;
  distributedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProfitCreateManyInput = {
  id?: string;
  userId: string;
  accountId?: string | null;
  investmentId?: string | null;
  amount: number;
  status?: $Enums.ProfitStatus;
  distributedAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ProfitUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  accountId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  status?: Prisma.EnumProfitStatusFieldUpdateOperationsInput | $Enums.ProfitStatus;
  distributedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProfitUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  accountId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  investmentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  status?: Prisma.EnumProfitStatusFieldUpdateOperationsInput | $Enums.ProfitStatus;
  distributedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProfitListRelationFilter = {
  every?: Prisma.ProfitWhereInput;
  some?: Prisma.ProfitWhereInput;
  none?: Prisma.ProfitWhereInput;
};

export type ProfitOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ProfitCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  accountId?: Prisma.SortOrder;
  investmentId?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  distributedAt?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type ProfitAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder;
};

export type ProfitMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  accountId?: Prisma.SortOrder;
  investmentId?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  distributedAt?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type ProfitMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  accountId?: Prisma.SortOrder;
  investmentId?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  status?: Prisma.SortOrder;
  distributedAt?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type ProfitSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder;
};

export type ProfitCreateNestedManyWithoutInvestmentInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProfitCreateWithoutInvestmentInput,
        Prisma.ProfitUncheckedCreateWithoutInvestmentInput
      >
    | Prisma.ProfitCreateWithoutInvestmentInput[]
    | Prisma.ProfitUncheckedCreateWithoutInvestmentInput[];
  connectOrCreate?:
    | Prisma.ProfitCreateOrConnectWithoutInvestmentInput
    | Prisma.ProfitCreateOrConnectWithoutInvestmentInput[];
  createMany?: Prisma.ProfitCreateManyInvestmentInputEnvelope;
  connect?: Prisma.ProfitWhereUniqueInput | Prisma.ProfitWhereUniqueInput[];
};

export type ProfitUncheckedCreateNestedManyWithoutInvestmentInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProfitCreateWithoutInvestmentInput,
        Prisma.ProfitUncheckedCreateWithoutInvestmentInput
      >
    | Prisma.ProfitCreateWithoutInvestmentInput[]
    | Prisma.ProfitUncheckedCreateWithoutInvestmentInput[];
  connectOrCreate?:
    | Prisma.ProfitCreateOrConnectWithoutInvestmentInput
    | Prisma.ProfitCreateOrConnectWithoutInvestmentInput[];
  createMany?: Prisma.ProfitCreateManyInvestmentInputEnvelope;
  connect?: Prisma.ProfitWhereUniqueInput | Prisma.ProfitWhereUniqueInput[];
};

export type ProfitUpdateManyWithoutInvestmentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProfitCreateWithoutInvestmentInput,
        Prisma.ProfitUncheckedCreateWithoutInvestmentInput
      >
    | Prisma.ProfitCreateWithoutInvestmentInput[]
    | Prisma.ProfitUncheckedCreateWithoutInvestmentInput[];
  connectOrCreate?:
    | Prisma.ProfitCreateOrConnectWithoutInvestmentInput
    | Prisma.ProfitCreateOrConnectWithoutInvestmentInput[];
  upsert?:
    | Prisma.ProfitUpsertWithWhereUniqueWithoutInvestmentInput
    | Prisma.ProfitUpsertWithWhereUniqueWithoutInvestmentInput[];
  createMany?: Prisma.ProfitCreateManyInvestmentInputEnvelope;
  set?: Prisma.ProfitWhereUniqueInput | Prisma.ProfitWhereUniqueInput[];
  disconnect?: Prisma.ProfitWhereUniqueInput | Prisma.ProfitWhereUniqueInput[];
  delete?: Prisma.ProfitWhereUniqueInput | Prisma.ProfitWhereUniqueInput[];
  connect?: Prisma.ProfitWhereUniqueInput | Prisma.ProfitWhereUniqueInput[];
  update?:
    | Prisma.ProfitUpdateWithWhereUniqueWithoutInvestmentInput
    | Prisma.ProfitUpdateWithWhereUniqueWithoutInvestmentInput[];
  updateMany?:
    | Prisma.ProfitUpdateManyWithWhereWithoutInvestmentInput
    | Prisma.ProfitUpdateManyWithWhereWithoutInvestmentInput[];
  deleteMany?: Prisma.ProfitScalarWhereInput | Prisma.ProfitScalarWhereInput[];
};

export type ProfitUncheckedUpdateManyWithoutInvestmentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ProfitCreateWithoutInvestmentInput,
        Prisma.ProfitUncheckedCreateWithoutInvestmentInput
      >
    | Prisma.ProfitCreateWithoutInvestmentInput[]
    | Prisma.ProfitUncheckedCreateWithoutInvestmentInput[];
  connectOrCreate?:
    | Prisma.ProfitCreateOrConnectWithoutInvestmentInput
    | Prisma.ProfitCreateOrConnectWithoutInvestmentInput[];
  upsert?:
    | Prisma.ProfitUpsertWithWhereUniqueWithoutInvestmentInput
    | Prisma.ProfitUpsertWithWhereUniqueWithoutInvestmentInput[];
  createMany?: Prisma.ProfitCreateManyInvestmentInputEnvelope;
  set?: Prisma.ProfitWhereUniqueInput | Prisma.ProfitWhereUniqueInput[];
  disconnect?: Prisma.ProfitWhereUniqueInput | Prisma.ProfitWhereUniqueInput[];
  delete?: Prisma.ProfitWhereUniqueInput | Prisma.ProfitWhereUniqueInput[];
  connect?: Prisma.ProfitWhereUniqueInput | Prisma.ProfitWhereUniqueInput[];
  update?:
    | Prisma.ProfitUpdateWithWhereUniqueWithoutInvestmentInput
    | Prisma.ProfitUpdateWithWhereUniqueWithoutInvestmentInput[];
  updateMany?:
    | Prisma.ProfitUpdateManyWithWhereWithoutInvestmentInput
    | Prisma.ProfitUpdateManyWithWhereWithoutInvestmentInput[];
  deleteMany?: Prisma.ProfitScalarWhereInput | Prisma.ProfitScalarWhereInput[];
};

export type EnumProfitStatusFieldUpdateOperationsInput = {
  set?: $Enums.ProfitStatus;
};

export type ProfitCreateWithoutInvestmentInput = {
  id?: string;
  userId: string;
  accountId?: string | null;
  amount: number;
  status?: $Enums.ProfitStatus;
  distributedAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ProfitUncheckedCreateWithoutInvestmentInput = {
  id?: string;
  userId: string;
  accountId?: string | null;
  amount: number;
  status?: $Enums.ProfitStatus;
  distributedAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ProfitCreateOrConnectWithoutInvestmentInput = {
  where: Prisma.ProfitWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ProfitCreateWithoutInvestmentInput,
    Prisma.ProfitUncheckedCreateWithoutInvestmentInput
  >;
};

export type ProfitCreateManyInvestmentInputEnvelope = {
  data: Prisma.ProfitCreateManyInvestmentInput | Prisma.ProfitCreateManyInvestmentInput[];
};

export type ProfitUpsertWithWhereUniqueWithoutInvestmentInput = {
  where: Prisma.ProfitWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ProfitUpdateWithoutInvestmentInput,
    Prisma.ProfitUncheckedUpdateWithoutInvestmentInput
  >;
  create: Prisma.XOR<
    Prisma.ProfitCreateWithoutInvestmentInput,
    Prisma.ProfitUncheckedCreateWithoutInvestmentInput
  >;
};

export type ProfitUpdateWithWhereUniqueWithoutInvestmentInput = {
  where: Prisma.ProfitWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ProfitUpdateWithoutInvestmentInput,
    Prisma.ProfitUncheckedUpdateWithoutInvestmentInput
  >;
};

export type ProfitUpdateManyWithWhereWithoutInvestmentInput = {
  where: Prisma.ProfitScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ProfitUpdateManyMutationInput,
    Prisma.ProfitUncheckedUpdateManyWithoutInvestmentInput
  >;
};

export type ProfitScalarWhereInput = {
  AND?: Prisma.ProfitScalarWhereInput | Prisma.ProfitScalarWhereInput[];
  OR?: Prisma.ProfitScalarWhereInput[];
  NOT?: Prisma.ProfitScalarWhereInput | Prisma.ProfitScalarWhereInput[];
  id?: Prisma.StringFilter<"Profit"> | string;
  userId?: Prisma.StringFilter<"Profit"> | string;
  accountId?: Prisma.StringNullableFilter<"Profit"> | string | null;
  investmentId?: Prisma.StringNullableFilter<"Profit"> | string | null;
  amount?: Prisma.FloatFilter<"Profit"> | number;
  status?: Prisma.EnumProfitStatusFilter<"Profit"> | $Enums.ProfitStatus;
  distributedAt?: Prisma.DateTimeNullableFilter<"Profit"> | Date | string | null;
  createdAt?: Prisma.DateTimeFilter<"Profit"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Profit"> | Date | string;
};

export type ProfitCreateManyInvestmentInput = {
  id?: string;
  userId: string;
  accountId?: string | null;
  amount: number;
  status?: $Enums.ProfitStatus;
  distributedAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ProfitUpdateWithoutInvestmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  accountId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  status?: Prisma.EnumProfitStatusFieldUpdateOperationsInput | $Enums.ProfitStatus;
  distributedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProfitUncheckedUpdateWithoutInvestmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  accountId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  status?: Prisma.EnumProfitStatusFieldUpdateOperationsInput | $Enums.ProfitStatus;
  distributedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProfitUncheckedUpdateManyWithoutInvestmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  accountId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  amount?: Prisma.FloatFieldUpdateOperationsInput | number;
  status?: Prisma.EnumProfitStatusFieldUpdateOperationsInput | $Enums.ProfitStatus;
  distributedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ProfitSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    accountId?: boolean;
    investmentId?: boolean;
    amount?: boolean;
    status?: boolean;
    distributedAt?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    Investment?: boolean | Prisma.Profit$InvestmentArgs<ExtArgs>;
  },
  ExtArgs["result"]["profit"]
>;

export type ProfitSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    accountId?: boolean;
    investmentId?: boolean;
    amount?: boolean;
    status?: boolean;
    distributedAt?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    Investment?: boolean | Prisma.Profit$InvestmentArgs<ExtArgs>;
  },
  ExtArgs["result"]["profit"]
>;

export type ProfitSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    accountId?: boolean;
    investmentId?: boolean;
    amount?: boolean;
    status?: boolean;
    distributedAt?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    Investment?: boolean | Prisma.Profit$InvestmentArgs<ExtArgs>;
  },
  ExtArgs["result"]["profit"]
>;

export type ProfitSelectScalar = {
  id?: boolean;
  userId?: boolean;
  accountId?: boolean;
  investmentId?: boolean;
  amount?: boolean;
  status?: boolean;
  distributedAt?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type ProfitOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "userId"
  | "accountId"
  | "investmentId"
  | "amount"
  | "status"
  | "distributedAt"
  | "createdAt"
  | "updatedAt",
  ExtArgs["result"]["profit"]
>;
export type ProfitInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  Investment?: boolean | Prisma.Profit$InvestmentArgs<ExtArgs>;
};
export type ProfitIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  Investment?: boolean | Prisma.Profit$InvestmentArgs<ExtArgs>;
};
export type ProfitIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  Investment?: boolean | Prisma.Profit$InvestmentArgs<ExtArgs>;
};

export type $ProfitPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "Profit";
  objects: {
    Investment: Prisma.$InvestmentPayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      userId: string;
      accountId: string | null;
      investmentId: string | null;
      amount: number;
      status: $Enums.ProfitStatus;
      distributedAt: Date | null;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["profit"]
  >;
  composites: {};
};

export type ProfitGetPayload<S extends boolean | null | undefined | ProfitDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$ProfitPayload, S>;

export type ProfitCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<ProfitFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: ProfitCountAggregateInputType | true;
};

export interface ProfitDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>["model"]["Profit"]; meta: { name: "Profit" } };
  /**
   * Find zero or one Profit that matches the filter.
   * @param {ProfitFindUniqueArgs} args - Arguments to find a Profit
   * @example
   * // Get one Profit
   * const profit = await prisma.profit.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProfitFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ProfitFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__ProfitClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProfitPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Profit that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProfitFindUniqueOrThrowArgs} args - Arguments to find a Profit
   * @example
   * // Get one Profit
   * const profit = await prisma.profit.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProfitFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ProfitFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ProfitClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProfitPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Profit that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfitFindFirstArgs} args - Arguments to find a Profit
   * @example
   * // Get one Profit
   * const profit = await prisma.profit.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProfitFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ProfitFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__ProfitClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProfitPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Profit that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfitFindFirstOrThrowArgs} args - Arguments to find a Profit
   * @example
   * // Get one Profit
   * const profit = await prisma.profit.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProfitFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ProfitFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ProfitClient<
    runtime.Types.Result.GetResult<
      Prisma.$ProfitPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Profits that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfitFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Profits
   * const profits = await prisma.profit.findMany()
   *
   * // Get first 10 Profits
   * const profits = await prisma.profit.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const profitWithIdOnly = await prisma.profit.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ProfitFindManyArgs>(
    args?: Prisma.SelectSubset<T, ProfitFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$ProfitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
  >;

  /**
   * Create a Profit.
   * @param {ProfitCreateArgs} args - Arguments to create a Profit.
   * @example
   * // Create one Profit
   * const Profit = await prisma.profit.create({
   *   data: {
   *     // ... data to create a Profit
   *   }
   * })
   *
   */
  create<T extends ProfitCreateArgs>(
    args: Prisma.SelectSubset<T, ProfitCreateArgs<ExtArgs>>
  ): Prisma.Prisma__ProfitClient<
    runtime.Types.Result.GetResult<Prisma.$ProfitPayload<ExtArgs>, T, "create", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Profits.
   * @param {ProfitCreateManyArgs} args - Arguments to create many Profits.
   * @example
   * // Create many Profits
   * const profit = await prisma.profit.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ProfitCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ProfitCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Profits and returns the data saved in the database.
   * @param {ProfitCreateManyAndReturnArgs} args - Arguments to create many Profits.
   * @example
   * // Create many Profits
   * const profit = await prisma.profit.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Profits and only return the `id`
   * const profitWithIdOnly = await prisma.profit.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ProfitCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ProfitCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ProfitPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Profit.
   * @param {ProfitDeleteArgs} args - Arguments to delete one Profit.
   * @example
   * // Delete one Profit
   * const Profit = await prisma.profit.delete({
   *   where: {
   *     // ... filter to delete one Profit
   *   }
   * })
   *
   */
  delete<T extends ProfitDeleteArgs>(
    args: Prisma.SelectSubset<T, ProfitDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__ProfitClient<
    runtime.Types.Result.GetResult<Prisma.$ProfitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Profit.
   * @param {ProfitUpdateArgs} args - Arguments to update one Profit.
   * @example
   * // Update one Profit
   * const profit = await prisma.profit.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ProfitUpdateArgs>(
    args: Prisma.SelectSubset<T, ProfitUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__ProfitClient<
    runtime.Types.Result.GetResult<Prisma.$ProfitPayload<ExtArgs>, T, "update", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Profits.
   * @param {ProfitDeleteManyArgs} args - Arguments to filter Profits to delete.
   * @example
   * // Delete a few Profits
   * const { count } = await prisma.profit.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ProfitDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ProfitDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Profits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfitUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Profits
   * const profit = await prisma.profit.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ProfitUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ProfitUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Profits and returns the data updated in the database.
   * @param {ProfitUpdateManyAndReturnArgs} args - Arguments to update many Profits.
   * @example
   * // Update many Profits
   * const profit = await prisma.profit.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Profits and only return the `id`
   * const profitWithIdOnly = await prisma.profit.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ProfitUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ProfitUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ProfitPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Profit.
   * @param {ProfitUpsertArgs} args - Arguments to update or create a Profit.
   * @example
   * // Update or create a Profit
   * const profit = await prisma.profit.upsert({
   *   create: {
   *     // ... data to create a Profit
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Profit we want to update
   *   }
   * })
   */
  upsert<T extends ProfitUpsertArgs>(
    args: Prisma.SelectSubset<T, ProfitUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__ProfitClient<
    runtime.Types.Result.GetResult<Prisma.$ProfitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Profits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfitCountArgs} args - Arguments to filter Profits to count.
   * @example
   * // Count the number of Profits
   * const count = await prisma.profit.count({
   *   where: {
   *     // ... the filter for the Profits we want to count
   *   }
   * })
   **/
  count<T extends ProfitCountArgs>(
    args?: Prisma.Subset<T, ProfitCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], ProfitCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Profit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ProfitAggregateArgs>(
    args: Prisma.Subset<T, ProfitAggregateArgs>
  ): Prisma.PrismaPromise<GetProfitAggregateType<T>>;

  /**
   * Group by Profit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfitGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ProfitGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProfitGroupByArgs["orderBy"] }
      : { orderBy?: ProfitGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, ProfitGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetProfitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Profit model
   */
  readonly fields: ProfitFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Profit.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProfitClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  Investment<T extends Prisma.Profit$InvestmentArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Profit$InvestmentArgs<ExtArgs>>
  ): Prisma.Prisma__InvestmentClient<
    runtime.Types.Result.GetResult<
      Prisma.$InvestmentPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Profit model
 */
export interface ProfitFieldRefs {
  readonly id: Prisma.FieldRef<"Profit", "String">;
  readonly userId: Prisma.FieldRef<"Profit", "String">;
  readonly accountId: Prisma.FieldRef<"Profit", "String">;
  readonly investmentId: Prisma.FieldRef<"Profit", "String">;
  readonly amount: Prisma.FieldRef<"Profit", "Float">;
  readonly status: Prisma.FieldRef<"Profit", "ProfitStatus">;
  readonly distributedAt: Prisma.FieldRef<"Profit", "DateTime">;
  readonly createdAt: Prisma.FieldRef<"Profit", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"Profit", "DateTime">;
}

// Custom InputTypes
/**
 * Profit findUnique
 */
export type ProfitFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profit
   */
  select?: Prisma.ProfitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Profit
   */
  omit?: Prisma.ProfitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfitInclude<ExtArgs> | null;
  /**
   * Filter, which Profit to fetch.
   */
  where: Prisma.ProfitWhereUniqueInput;
};

/**
 * Profit findUniqueOrThrow
 */
export type ProfitFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profit
   */
  select?: Prisma.ProfitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Profit
   */
  omit?: Prisma.ProfitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfitInclude<ExtArgs> | null;
  /**
   * Filter, which Profit to fetch.
   */
  where: Prisma.ProfitWhereUniqueInput;
};

/**
 * Profit findFirst
 */
export type ProfitFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profit
   */
  select?: Prisma.ProfitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Profit
   */
  omit?: Prisma.ProfitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfitInclude<ExtArgs> | null;
  /**
   * Filter, which Profit to fetch.
   */
  where?: Prisma.ProfitWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Profits to fetch.
   */
  orderBy?: Prisma.ProfitOrderByWithRelationInput | Prisma.ProfitOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Profits.
   */
  cursor?: Prisma.ProfitWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Profits from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Profits.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Profits.
   */
  distinct?: Prisma.ProfitScalarFieldEnum | Prisma.ProfitScalarFieldEnum[];
};

/**
 * Profit findFirstOrThrow
 */
export type ProfitFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profit
   */
  select?: Prisma.ProfitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Profit
   */
  omit?: Prisma.ProfitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfitInclude<ExtArgs> | null;
  /**
   * Filter, which Profit to fetch.
   */
  where?: Prisma.ProfitWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Profits to fetch.
   */
  orderBy?: Prisma.ProfitOrderByWithRelationInput | Prisma.ProfitOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Profits.
   */
  cursor?: Prisma.ProfitWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Profits from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Profits.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Profits.
   */
  distinct?: Prisma.ProfitScalarFieldEnum | Prisma.ProfitScalarFieldEnum[];
};

/**
 * Profit findMany
 */
export type ProfitFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profit
   */
  select?: Prisma.ProfitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Profit
   */
  omit?: Prisma.ProfitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfitInclude<ExtArgs> | null;
  /**
   * Filter, which Profits to fetch.
   */
  where?: Prisma.ProfitWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Profits to fetch.
   */
  orderBy?: Prisma.ProfitOrderByWithRelationInput | Prisma.ProfitOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Profits.
   */
  cursor?: Prisma.ProfitWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Profits from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Profits.
   */
  skip?: number;
  distinct?: Prisma.ProfitScalarFieldEnum | Prisma.ProfitScalarFieldEnum[];
};

/**
 * Profit create
 */
export type ProfitCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profit
   */
  select?: Prisma.ProfitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Profit
   */
  omit?: Prisma.ProfitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfitInclude<ExtArgs> | null;
  /**
   * The data needed to create a Profit.
   */
  data: Prisma.XOR<Prisma.ProfitCreateInput, Prisma.ProfitUncheckedCreateInput>;
};

/**
 * Profit createMany
 */
export type ProfitCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many Profits.
   */
  data: Prisma.ProfitCreateManyInput | Prisma.ProfitCreateManyInput[];
};

/**
 * Profit createManyAndReturn
 */
export type ProfitCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profit
   */
  select?: Prisma.ProfitSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Profit
   */
  omit?: Prisma.ProfitOmit<ExtArgs> | null;
  /**
   * The data used to create many Profits.
   */
  data: Prisma.ProfitCreateManyInput | Prisma.ProfitCreateManyInput[];
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfitIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Profit update
 */
export type ProfitUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profit
   */
  select?: Prisma.ProfitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Profit
   */
  omit?: Prisma.ProfitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfitInclude<ExtArgs> | null;
  /**
   * The data needed to update a Profit.
   */
  data: Prisma.XOR<Prisma.ProfitUpdateInput, Prisma.ProfitUncheckedUpdateInput>;
  /**
   * Choose, which Profit to update.
   */
  where: Prisma.ProfitWhereUniqueInput;
};

/**
 * Profit updateMany
 */
export type ProfitUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update Profits.
   */
  data: Prisma.XOR<Prisma.ProfitUpdateManyMutationInput, Prisma.ProfitUncheckedUpdateManyInput>;
  /**
   * Filter which Profits to update
   */
  where?: Prisma.ProfitWhereInput;
  /**
   * Limit how many Profits to update.
   */
  limit?: number;
};

/**
 * Profit updateManyAndReturn
 */
export type ProfitUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profit
   */
  select?: Prisma.ProfitSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Profit
   */
  omit?: Prisma.ProfitOmit<ExtArgs> | null;
  /**
   * The data used to update Profits.
   */
  data: Prisma.XOR<Prisma.ProfitUpdateManyMutationInput, Prisma.ProfitUncheckedUpdateManyInput>;
  /**
   * Filter which Profits to update
   */
  where?: Prisma.ProfitWhereInput;
  /**
   * Limit how many Profits to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfitIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Profit upsert
 */
export type ProfitUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profit
   */
  select?: Prisma.ProfitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Profit
   */
  omit?: Prisma.ProfitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfitInclude<ExtArgs> | null;
  /**
   * The filter to search for the Profit to update in case it exists.
   */
  where: Prisma.ProfitWhereUniqueInput;
  /**
   * In case the Profit found by the `where` argument doesn't exist, create a new Profit with this data.
   */
  create: Prisma.XOR<Prisma.ProfitCreateInput, Prisma.ProfitUncheckedCreateInput>;
  /**
   * In case the Profit was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProfitUpdateInput, Prisma.ProfitUncheckedUpdateInput>;
};

/**
 * Profit delete
 */
export type ProfitDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profit
   */
  select?: Prisma.ProfitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Profit
   */
  omit?: Prisma.ProfitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfitInclude<ExtArgs> | null;
  /**
   * Filter which Profit to delete.
   */
  where: Prisma.ProfitWhereUniqueInput;
};

/**
 * Profit deleteMany
 */
export type ProfitDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which Profits to delete
   */
  where?: Prisma.ProfitWhereInput;
  /**
   * Limit how many Profits to delete.
   */
  limit?: number;
};

/**
 * Profit.Investment
 */
export type Profit$InvestmentArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Investment
   */
  select?: Prisma.InvestmentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Investment
   */
  omit?: Prisma.InvestmentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InvestmentInclude<ExtArgs> | null;
  where?: Prisma.InvestmentWhereInput;
};

/**
 * Profit without action
 */
export type ProfitDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the Profit
   */
  select?: Prisma.ProfitSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Profit
   */
  omit?: Prisma.ProfitOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfitInclude<ExtArgs> | null;
};
