
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `InvestmentPlan` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model InvestmentPlan
 * 
 */
export type InvestmentPlanModel = runtime.Types.Result.DefaultSelection<Prisma.$InvestmentPlanPayload>

export type AggregateInvestmentPlan = {
  _count: InvestmentPlanCountAggregateOutputType | null
  _min: InvestmentPlanMinAggregateOutputType | null
  _max: InvestmentPlanMaxAggregateOutputType | null
}

export type InvestmentPlanMinAggregateOutputType = {
  id: string | null
  name: string | null
  slug: string | null
  image: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InvestmentPlanMaxAggregateOutputType = {
  id: string | null
  name: string | null
  slug: string | null
  image: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InvestmentPlanCountAggregateOutputType = {
  id: number
  name: number
  slug: number
  image: number
  tiers: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type InvestmentPlanMinAggregateInputType = {
  id?: true
  name?: true
  slug?: true
  image?: true
  createdAt?: true
  updatedAt?: true
}

export type InvestmentPlanMaxAggregateInputType = {
  id?: true
  name?: true
  slug?: true
  image?: true
  createdAt?: true
  updatedAt?: true
}

export type InvestmentPlanCountAggregateInputType = {
  id?: true
  name?: true
  slug?: true
  image?: true
  tiers?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type InvestmentPlanAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InvestmentPlan to aggregate.
   */
  where?: Prisma.InvestmentPlanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InvestmentPlans to fetch.
   */
  orderBy?: Prisma.InvestmentPlanOrderByWithRelationInput | Prisma.InvestmentPlanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.InvestmentPlanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InvestmentPlans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InvestmentPlans.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned InvestmentPlans
  **/
  _count?: true | InvestmentPlanCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: InvestmentPlanMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: InvestmentPlanMaxAggregateInputType
}

export type GetInvestmentPlanAggregateType<T extends InvestmentPlanAggregateArgs> = {
      [P in keyof T & keyof AggregateInvestmentPlan]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInvestmentPlan[P]>
    : Prisma.GetScalarType<T[P], AggregateInvestmentPlan[P]>
}




export type InvestmentPlanGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InvestmentPlanWhereInput
  orderBy?: Prisma.InvestmentPlanOrderByWithAggregationInput | Prisma.InvestmentPlanOrderByWithAggregationInput[]
  by: Prisma.InvestmentPlanScalarFieldEnum[] | Prisma.InvestmentPlanScalarFieldEnum
  having?: Prisma.InvestmentPlanScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: InvestmentPlanCountAggregateInputType | true
  _min?: InvestmentPlanMinAggregateInputType
  _max?: InvestmentPlanMaxAggregateInputType
}

export type InvestmentPlanGroupByOutputType = {
  id: string
  name: string
  slug: string
  image: string | null
  tiers: PrismaJson.InvestmentTier[] | null
  createdAt: Date
  updatedAt: Date
  _count: InvestmentPlanCountAggregateOutputType | null
  _min: InvestmentPlanMinAggregateOutputType | null
  _max: InvestmentPlanMaxAggregateOutputType | null
}

type GetInvestmentPlanGroupByPayload<T extends InvestmentPlanGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InvestmentPlanGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof InvestmentPlanGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InvestmentPlanGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InvestmentPlanGroupByOutputType[P]>
      }
    >
  > 



export type InvestmentPlanWhereInput = {
  AND?: Prisma.InvestmentPlanWhereInput | Prisma.InvestmentPlanWhereInput[]
  OR?: Prisma.InvestmentPlanWhereInput[]
  NOT?: Prisma.InvestmentPlanWhereInput | Prisma.InvestmentPlanWhereInput[]
  id?: Prisma.StringFilter<"InvestmentPlan"> | string
  name?: Prisma.StringFilter<"InvestmentPlan"> | string
  slug?: Prisma.StringFilter<"InvestmentPlan"> | string
  image?: Prisma.StringNullableFilter<"InvestmentPlan"> | string | null
  tiers?: Prisma.JsonNullableFilter<"InvestmentPlan">
  createdAt?: Prisma.DateTimeFilter<"InvestmentPlan"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InvestmentPlan"> | Date | string
}

export type InvestmentPlanOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  image?: Prisma.SortOrderInput | Prisma.SortOrder
  tiers?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InvestmentPlanWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  slug?: string
  AND?: Prisma.InvestmentPlanWhereInput | Prisma.InvestmentPlanWhereInput[]
  OR?: Prisma.InvestmentPlanWhereInput[]
  NOT?: Prisma.InvestmentPlanWhereInput | Prisma.InvestmentPlanWhereInput[]
  name?: Prisma.StringFilter<"InvestmentPlan"> | string
  image?: Prisma.StringNullableFilter<"InvestmentPlan"> | string | null
  tiers?: Prisma.JsonNullableFilter<"InvestmentPlan">
  createdAt?: Prisma.DateTimeFilter<"InvestmentPlan"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InvestmentPlan"> | Date | string
}, "id" | "slug">

export type InvestmentPlanOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  image?: Prisma.SortOrderInput | Prisma.SortOrder
  tiers?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.InvestmentPlanCountOrderByAggregateInput
  _max?: Prisma.InvestmentPlanMaxOrderByAggregateInput
  _min?: Prisma.InvestmentPlanMinOrderByAggregateInput
}

export type InvestmentPlanScalarWhereWithAggregatesInput = {
  AND?: Prisma.InvestmentPlanScalarWhereWithAggregatesInput | Prisma.InvestmentPlanScalarWhereWithAggregatesInput[]
  OR?: Prisma.InvestmentPlanScalarWhereWithAggregatesInput[]
  NOT?: Prisma.InvestmentPlanScalarWhereWithAggregatesInput | Prisma.InvestmentPlanScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"InvestmentPlan"> | string
  name?: Prisma.StringWithAggregatesFilter<"InvestmentPlan"> | string
  slug?: Prisma.StringWithAggregatesFilter<"InvestmentPlan"> | string
  image?: Prisma.StringNullableWithAggregatesFilter<"InvestmentPlan"> | string | null
  tiers?: Prisma.JsonNullableWithAggregatesFilter<"InvestmentPlan">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"InvestmentPlan"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"InvestmentPlan"> | Date | string
}

export type InvestmentPlanCreateInput = {
  id?: string
  name: string
  slug: string
  image?: string | null
  tiers?: PrismaJson.InvestmentTier[] | Prisma.NullableJsonNullValueInput
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InvestmentPlanUncheckedCreateInput = {
  id?: string
  name: string
  slug: string
  image?: string | null
  tiers?: PrismaJson.InvestmentTier[] | Prisma.NullableJsonNullValueInput
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InvestmentPlanUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tiers?: PrismaJson.InvestmentTier[] | Prisma.NullableJsonNullValueInput
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InvestmentPlanUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tiers?: PrismaJson.InvestmentTier[] | Prisma.NullableJsonNullValueInput
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InvestmentPlanCreateManyInput = {
  id?: string
  name: string
  slug: string
  image?: string | null
  tiers?: PrismaJson.InvestmentTier[] | Prisma.NullableJsonNullValueInput
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InvestmentPlanUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tiers?: PrismaJson.InvestmentTier[] | Prisma.NullableJsonNullValueInput
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InvestmentPlanUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tiers?: PrismaJson.InvestmentTier[] | Prisma.NullableJsonNullValueInput
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InvestmentPlanCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  image?: Prisma.SortOrder
  tiers?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InvestmentPlanMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  image?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InvestmentPlanMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  image?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}



export type InvestmentPlanSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  slug?: boolean
  image?: boolean
  tiers?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["investmentPlan"]>

export type InvestmentPlanSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  slug?: boolean
  image?: boolean
  tiers?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["investmentPlan"]>

export type InvestmentPlanSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  slug?: boolean
  image?: boolean
  tiers?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["investmentPlan"]>

export type InvestmentPlanSelectScalar = {
  id?: boolean
  name?: boolean
  slug?: boolean
  image?: boolean
  tiers?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type InvestmentPlanOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "slug" | "image" | "tiers" | "createdAt" | "updatedAt", ExtArgs["result"]["investmentPlan"]>

export type $InvestmentPlanPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "InvestmentPlan"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    slug: string
    image: string | null
    /**
     * [InvestmentTier[]]
     */
    tiers: PrismaJson.InvestmentTier[] | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["investmentPlan"]>
  composites: {}
}

export type InvestmentPlanGetPayload<S extends boolean | null | undefined | InvestmentPlanDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$InvestmentPlanPayload, S>

export type InvestmentPlanCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<InvestmentPlanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: InvestmentPlanCountAggregateInputType | true
  }

export interface InvestmentPlanDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InvestmentPlan'], meta: { name: 'InvestmentPlan' } }
  /**
   * Find zero or one InvestmentPlan that matches the filter.
   * @param {InvestmentPlanFindUniqueArgs} args - Arguments to find a InvestmentPlan
   * @example
   * // Get one InvestmentPlan
   * const investmentPlan = await prisma.investmentPlan.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InvestmentPlanFindUniqueArgs>(args: Prisma.SelectSubset<T, InvestmentPlanFindUniqueArgs<ExtArgs>>): Prisma.Prisma__InvestmentPlanClient<runtime.Types.Result.GetResult<Prisma.$InvestmentPlanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one InvestmentPlan that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InvestmentPlanFindUniqueOrThrowArgs} args - Arguments to find a InvestmentPlan
   * @example
   * // Get one InvestmentPlan
   * const investmentPlan = await prisma.investmentPlan.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InvestmentPlanFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, InvestmentPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__InvestmentPlanClient<runtime.Types.Result.GetResult<Prisma.$InvestmentPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InvestmentPlan that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvestmentPlanFindFirstArgs} args - Arguments to find a InvestmentPlan
   * @example
   * // Get one InvestmentPlan
   * const investmentPlan = await prisma.investmentPlan.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InvestmentPlanFindFirstArgs>(args?: Prisma.SelectSubset<T, InvestmentPlanFindFirstArgs<ExtArgs>>): Prisma.Prisma__InvestmentPlanClient<runtime.Types.Result.GetResult<Prisma.$InvestmentPlanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InvestmentPlan that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvestmentPlanFindFirstOrThrowArgs} args - Arguments to find a InvestmentPlan
   * @example
   * // Get one InvestmentPlan
   * const investmentPlan = await prisma.investmentPlan.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InvestmentPlanFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, InvestmentPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__InvestmentPlanClient<runtime.Types.Result.GetResult<Prisma.$InvestmentPlanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more InvestmentPlans that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvestmentPlanFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all InvestmentPlans
   * const investmentPlans = await prisma.investmentPlan.findMany()
   * 
   * // Get first 10 InvestmentPlans
   * const investmentPlans = await prisma.investmentPlan.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const investmentPlanWithIdOnly = await prisma.investmentPlan.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends InvestmentPlanFindManyArgs>(args?: Prisma.SelectSubset<T, InvestmentPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InvestmentPlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a InvestmentPlan.
   * @param {InvestmentPlanCreateArgs} args - Arguments to create a InvestmentPlan.
   * @example
   * // Create one InvestmentPlan
   * const InvestmentPlan = await prisma.investmentPlan.create({
   *   data: {
   *     // ... data to create a InvestmentPlan
   *   }
   * })
   * 
   */
  create<T extends InvestmentPlanCreateArgs>(args: Prisma.SelectSubset<T, InvestmentPlanCreateArgs<ExtArgs>>): Prisma.Prisma__InvestmentPlanClient<runtime.Types.Result.GetResult<Prisma.$InvestmentPlanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many InvestmentPlans.
   * @param {InvestmentPlanCreateManyArgs} args - Arguments to create many InvestmentPlans.
   * @example
   * // Create many InvestmentPlans
   * const investmentPlan = await prisma.investmentPlan.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends InvestmentPlanCreateManyArgs>(args?: Prisma.SelectSubset<T, InvestmentPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many InvestmentPlans and returns the data saved in the database.
   * @param {InvestmentPlanCreateManyAndReturnArgs} args - Arguments to create many InvestmentPlans.
   * @example
   * // Create many InvestmentPlans
   * const investmentPlan = await prisma.investmentPlan.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many InvestmentPlans and only return the `id`
   * const investmentPlanWithIdOnly = await prisma.investmentPlan.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends InvestmentPlanCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, InvestmentPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InvestmentPlanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a InvestmentPlan.
   * @param {InvestmentPlanDeleteArgs} args - Arguments to delete one InvestmentPlan.
   * @example
   * // Delete one InvestmentPlan
   * const InvestmentPlan = await prisma.investmentPlan.delete({
   *   where: {
   *     // ... filter to delete one InvestmentPlan
   *   }
   * })
   * 
   */
  delete<T extends InvestmentPlanDeleteArgs>(args: Prisma.SelectSubset<T, InvestmentPlanDeleteArgs<ExtArgs>>): Prisma.Prisma__InvestmentPlanClient<runtime.Types.Result.GetResult<Prisma.$InvestmentPlanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one InvestmentPlan.
   * @param {InvestmentPlanUpdateArgs} args - Arguments to update one InvestmentPlan.
   * @example
   * // Update one InvestmentPlan
   * const investmentPlan = await prisma.investmentPlan.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends InvestmentPlanUpdateArgs>(args: Prisma.SelectSubset<T, InvestmentPlanUpdateArgs<ExtArgs>>): Prisma.Prisma__InvestmentPlanClient<runtime.Types.Result.GetResult<Prisma.$InvestmentPlanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more InvestmentPlans.
   * @param {InvestmentPlanDeleteManyArgs} args - Arguments to filter InvestmentPlans to delete.
   * @example
   * // Delete a few InvestmentPlans
   * const { count } = await prisma.investmentPlan.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends InvestmentPlanDeleteManyArgs>(args?: Prisma.SelectSubset<T, InvestmentPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InvestmentPlans.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvestmentPlanUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many InvestmentPlans
   * const investmentPlan = await prisma.investmentPlan.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends InvestmentPlanUpdateManyArgs>(args: Prisma.SelectSubset<T, InvestmentPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InvestmentPlans and returns the data updated in the database.
   * @param {InvestmentPlanUpdateManyAndReturnArgs} args - Arguments to update many InvestmentPlans.
   * @example
   * // Update many InvestmentPlans
   * const investmentPlan = await prisma.investmentPlan.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more InvestmentPlans and only return the `id`
   * const investmentPlanWithIdOnly = await prisma.investmentPlan.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends InvestmentPlanUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, InvestmentPlanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InvestmentPlanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one InvestmentPlan.
   * @param {InvestmentPlanUpsertArgs} args - Arguments to update or create a InvestmentPlan.
   * @example
   * // Update or create a InvestmentPlan
   * const investmentPlan = await prisma.investmentPlan.upsert({
   *   create: {
   *     // ... data to create a InvestmentPlan
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the InvestmentPlan we want to update
   *   }
   * })
   */
  upsert<T extends InvestmentPlanUpsertArgs>(args: Prisma.SelectSubset<T, InvestmentPlanUpsertArgs<ExtArgs>>): Prisma.Prisma__InvestmentPlanClient<runtime.Types.Result.GetResult<Prisma.$InvestmentPlanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of InvestmentPlans.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvestmentPlanCountArgs} args - Arguments to filter InvestmentPlans to count.
   * @example
   * // Count the number of InvestmentPlans
   * const count = await prisma.investmentPlan.count({
   *   where: {
   *     // ... the filter for the InvestmentPlans we want to count
   *   }
   * })
  **/
  count<T extends InvestmentPlanCountArgs>(
    args?: Prisma.Subset<T, InvestmentPlanCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], InvestmentPlanCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a InvestmentPlan.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvestmentPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends InvestmentPlanAggregateArgs>(args: Prisma.Subset<T, InvestmentPlanAggregateArgs>): Prisma.PrismaPromise<GetInvestmentPlanAggregateType<T>>

  /**
   * Group by InvestmentPlan.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InvestmentPlanGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends InvestmentPlanGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InvestmentPlanGroupByArgs['orderBy'] }
      : { orderBy?: InvestmentPlanGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, InvestmentPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvestmentPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the InvestmentPlan model
 */
readonly fields: InvestmentPlanFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for InvestmentPlan.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InvestmentPlanClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the InvestmentPlan model
 */
export interface InvestmentPlanFieldRefs {
  readonly id: Prisma.FieldRef<"InvestmentPlan", 'String'>
  readonly name: Prisma.FieldRef<"InvestmentPlan", 'String'>
  readonly slug: Prisma.FieldRef<"InvestmentPlan", 'String'>
  readonly image: Prisma.FieldRef<"InvestmentPlan", 'String'>
  readonly tiers: Prisma.FieldRef<"InvestmentPlan", 'Json'>
  readonly createdAt: Prisma.FieldRef<"InvestmentPlan", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"InvestmentPlan", 'DateTime'>
}
    

// Custom InputTypes
/**
 * InvestmentPlan findUnique
 */
export type InvestmentPlanFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InvestmentPlan
   */
  select?: Prisma.InvestmentPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InvestmentPlan
   */
  omit?: Prisma.InvestmentPlanOmit<ExtArgs> | null
  /**
   * Filter, which InvestmentPlan to fetch.
   */
  where: Prisma.InvestmentPlanWhereUniqueInput
}

/**
 * InvestmentPlan findUniqueOrThrow
 */
export type InvestmentPlanFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InvestmentPlan
   */
  select?: Prisma.InvestmentPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InvestmentPlan
   */
  omit?: Prisma.InvestmentPlanOmit<ExtArgs> | null
  /**
   * Filter, which InvestmentPlan to fetch.
   */
  where: Prisma.InvestmentPlanWhereUniqueInput
}

/**
 * InvestmentPlan findFirst
 */
export type InvestmentPlanFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InvestmentPlan
   */
  select?: Prisma.InvestmentPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InvestmentPlan
   */
  omit?: Prisma.InvestmentPlanOmit<ExtArgs> | null
  /**
   * Filter, which InvestmentPlan to fetch.
   */
  where?: Prisma.InvestmentPlanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InvestmentPlans to fetch.
   */
  orderBy?: Prisma.InvestmentPlanOrderByWithRelationInput | Prisma.InvestmentPlanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InvestmentPlans.
   */
  cursor?: Prisma.InvestmentPlanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InvestmentPlans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InvestmentPlans.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InvestmentPlans.
   */
  distinct?: Prisma.InvestmentPlanScalarFieldEnum | Prisma.InvestmentPlanScalarFieldEnum[]
}

/**
 * InvestmentPlan findFirstOrThrow
 */
export type InvestmentPlanFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InvestmentPlan
   */
  select?: Prisma.InvestmentPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InvestmentPlan
   */
  omit?: Prisma.InvestmentPlanOmit<ExtArgs> | null
  /**
   * Filter, which InvestmentPlan to fetch.
   */
  where?: Prisma.InvestmentPlanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InvestmentPlans to fetch.
   */
  orderBy?: Prisma.InvestmentPlanOrderByWithRelationInput | Prisma.InvestmentPlanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InvestmentPlans.
   */
  cursor?: Prisma.InvestmentPlanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InvestmentPlans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InvestmentPlans.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InvestmentPlans.
   */
  distinct?: Prisma.InvestmentPlanScalarFieldEnum | Prisma.InvestmentPlanScalarFieldEnum[]
}

/**
 * InvestmentPlan findMany
 */
export type InvestmentPlanFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InvestmentPlan
   */
  select?: Prisma.InvestmentPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InvestmentPlan
   */
  omit?: Prisma.InvestmentPlanOmit<ExtArgs> | null
  /**
   * Filter, which InvestmentPlans to fetch.
   */
  where?: Prisma.InvestmentPlanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InvestmentPlans to fetch.
   */
  orderBy?: Prisma.InvestmentPlanOrderByWithRelationInput | Prisma.InvestmentPlanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing InvestmentPlans.
   */
  cursor?: Prisma.InvestmentPlanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InvestmentPlans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InvestmentPlans.
   */
  skip?: number
  distinct?: Prisma.InvestmentPlanScalarFieldEnum | Prisma.InvestmentPlanScalarFieldEnum[]
}

/**
 * InvestmentPlan create
 */
export type InvestmentPlanCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InvestmentPlan
   */
  select?: Prisma.InvestmentPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InvestmentPlan
   */
  omit?: Prisma.InvestmentPlanOmit<ExtArgs> | null
  /**
   * The data needed to create a InvestmentPlan.
   */
  data: Prisma.XOR<Prisma.InvestmentPlanCreateInput, Prisma.InvestmentPlanUncheckedCreateInput>
}

/**
 * InvestmentPlan createMany
 */
export type InvestmentPlanCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many InvestmentPlans.
   */
  data: Prisma.InvestmentPlanCreateManyInput | Prisma.InvestmentPlanCreateManyInput[]
}

/**
 * InvestmentPlan createManyAndReturn
 */
export type InvestmentPlanCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InvestmentPlan
   */
  select?: Prisma.InvestmentPlanSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InvestmentPlan
   */
  omit?: Prisma.InvestmentPlanOmit<ExtArgs> | null
  /**
   * The data used to create many InvestmentPlans.
   */
  data: Prisma.InvestmentPlanCreateManyInput | Prisma.InvestmentPlanCreateManyInput[]
}

/**
 * InvestmentPlan update
 */
export type InvestmentPlanUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InvestmentPlan
   */
  select?: Prisma.InvestmentPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InvestmentPlan
   */
  omit?: Prisma.InvestmentPlanOmit<ExtArgs> | null
  /**
   * The data needed to update a InvestmentPlan.
   */
  data: Prisma.XOR<Prisma.InvestmentPlanUpdateInput, Prisma.InvestmentPlanUncheckedUpdateInput>
  /**
   * Choose, which InvestmentPlan to update.
   */
  where: Prisma.InvestmentPlanWhereUniqueInput
}

/**
 * InvestmentPlan updateMany
 */
export type InvestmentPlanUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update InvestmentPlans.
   */
  data: Prisma.XOR<Prisma.InvestmentPlanUpdateManyMutationInput, Prisma.InvestmentPlanUncheckedUpdateManyInput>
  /**
   * Filter which InvestmentPlans to update
   */
  where?: Prisma.InvestmentPlanWhereInput
  /**
   * Limit how many InvestmentPlans to update.
   */
  limit?: number
}

/**
 * InvestmentPlan updateManyAndReturn
 */
export type InvestmentPlanUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InvestmentPlan
   */
  select?: Prisma.InvestmentPlanSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InvestmentPlan
   */
  omit?: Prisma.InvestmentPlanOmit<ExtArgs> | null
  /**
   * The data used to update InvestmentPlans.
   */
  data: Prisma.XOR<Prisma.InvestmentPlanUpdateManyMutationInput, Prisma.InvestmentPlanUncheckedUpdateManyInput>
  /**
   * Filter which InvestmentPlans to update
   */
  where?: Prisma.InvestmentPlanWhereInput
  /**
   * Limit how many InvestmentPlans to update.
   */
  limit?: number
}

/**
 * InvestmentPlan upsert
 */
export type InvestmentPlanUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InvestmentPlan
   */
  select?: Prisma.InvestmentPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InvestmentPlan
   */
  omit?: Prisma.InvestmentPlanOmit<ExtArgs> | null
  /**
   * The filter to search for the InvestmentPlan to update in case it exists.
   */
  where: Prisma.InvestmentPlanWhereUniqueInput
  /**
   * In case the InvestmentPlan found by the `where` argument doesn't exist, create a new InvestmentPlan with this data.
   */
  create: Prisma.XOR<Prisma.InvestmentPlanCreateInput, Prisma.InvestmentPlanUncheckedCreateInput>
  /**
   * In case the InvestmentPlan was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.InvestmentPlanUpdateInput, Prisma.InvestmentPlanUncheckedUpdateInput>
}

/**
 * InvestmentPlan delete
 */
export type InvestmentPlanDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InvestmentPlan
   */
  select?: Prisma.InvestmentPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InvestmentPlan
   */
  omit?: Prisma.InvestmentPlanOmit<ExtArgs> | null
  /**
   * Filter which InvestmentPlan to delete.
   */
  where: Prisma.InvestmentPlanWhereUniqueInput
}

/**
 * InvestmentPlan deleteMany
 */
export type InvestmentPlanDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InvestmentPlans to delete
   */
  where?: Prisma.InvestmentPlanWhereInput
  /**
   * Limit how many InvestmentPlans to delete.
   */
  limit?: number
}

/**
 * InvestmentPlan without action
 */
export type InvestmentPlanDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InvestmentPlan
   */
  select?: Prisma.InvestmentPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InvestmentPlan
   */
  omit?: Prisma.InvestmentPlanOmit<ExtArgs> | null
}
