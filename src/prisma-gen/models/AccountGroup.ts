/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `AccountGroup` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from "../pjtg";
import * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model AccountGroup
 *
 */
export type AccountGroupModel = runtime.Types.Result.DefaultSelection<Prisma.$AccountGroupPayload>;

export type AggregateAccountGroup = {
  _count: AccountGroupCountAggregateOutputType | null;
  _min: AccountGroupMinAggregateOutputType | null;
  _max: AccountGroupMaxAggregateOutputType | null;
};

export type AccountGroupMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  description: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type AccountGroupMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  description: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type AccountGroupCountAggregateOutputType = {
  id: number;
  name: number;
  currencies: number;
  description: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type AccountGroupMinAggregateInputType = {
  id?: true;
  name?: true;
  description?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type AccountGroupMaxAggregateInputType = {
  id?: true;
  name?: true;
  description?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type AccountGroupCountAggregateInputType = {
  id?: true;
  name?: true;
  currencies?: true;
  description?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type AccountGroupAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which AccountGroup to aggregate.
   */
  where?: Prisma.AccountGroupWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccountGroups to fetch.
   */
  orderBy?:
    | Prisma.AccountGroupOrderByWithRelationInput
    | Prisma.AccountGroupOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AccountGroupWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccountGroups from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccountGroups.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned AccountGroups
   **/
  _count?: true | AccountGroupCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AccountGroupMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AccountGroupMaxAggregateInputType;
};

export type GetAccountGroupAggregateType<T extends AccountGroupAggregateArgs> = {
  [P in keyof T & keyof AggregateAccountGroup]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAccountGroup[P]>
    : Prisma.GetScalarType<T[P], AggregateAccountGroup[P]>;
};

export type AccountGroupGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.AccountGroupWhereInput;
  orderBy?:
    | Prisma.AccountGroupOrderByWithAggregationInput
    | Prisma.AccountGroupOrderByWithAggregationInput[];
  by: Prisma.AccountGroupScalarFieldEnum[] | Prisma.AccountGroupScalarFieldEnum;
  having?: Prisma.AccountGroupScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AccountGroupCountAggregateInputType | true;
  _min?: AccountGroupMinAggregateInputType;
  _max?: AccountGroupMaxAggregateInputType;
};

export type AccountGroupGroupByOutputType = {
  id: string;
  name: string;
  currencies: PrismaJson.AccountGroupCurrencyData[];
  description: string | null;
  createdAt: Date;
  updatedAt: Date;
  _count: AccountGroupCountAggregateOutputType | null;
  _min: AccountGroupMinAggregateOutputType | null;
  _max: AccountGroupMaxAggregateOutputType | null;
};

type GetAccountGroupGroupByPayload<T extends AccountGroupGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AccountGroupGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof AccountGroupGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], AccountGroupGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], AccountGroupGroupByOutputType[P]>;
    }
  >
>;

export type AccountGroupWhereInput = {
  AND?: Prisma.AccountGroupWhereInput | Prisma.AccountGroupWhereInput[];
  OR?: Prisma.AccountGroupWhereInput[];
  NOT?: Prisma.AccountGroupWhereInput | Prisma.AccountGroupWhereInput[];
  id?: Prisma.StringFilter<"AccountGroup"> | string;
  name?: Prisma.StringFilter<"AccountGroup"> | string;
  currencies?: Prisma.JsonFilter<"AccountGroup">;
  description?: Prisma.StringNullableFilter<"AccountGroup"> | string | null;
  createdAt?: Prisma.DateTimeFilter<"AccountGroup"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"AccountGroup"> | Date | string;
  users?: Prisma.UserListRelationFilter;
};

export type AccountGroupOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  currencies?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  users?: Prisma.UserOrderByRelationAggregateInput;
};

export type AccountGroupWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    name?: string;
    AND?: Prisma.AccountGroupWhereInput | Prisma.AccountGroupWhereInput[];
    OR?: Prisma.AccountGroupWhereInput[];
    NOT?: Prisma.AccountGroupWhereInput | Prisma.AccountGroupWhereInput[];
    currencies?: Prisma.JsonFilter<"AccountGroup">;
    description?: Prisma.StringNullableFilter<"AccountGroup"> | string | null;
    createdAt?: Prisma.DateTimeFilter<"AccountGroup"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"AccountGroup"> | Date | string;
    users?: Prisma.UserListRelationFilter;
  },
  "id" | "name"
>;

export type AccountGroupOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  currencies?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.AccountGroupCountOrderByAggregateInput;
  _max?: Prisma.AccountGroupMaxOrderByAggregateInput;
  _min?: Prisma.AccountGroupMinOrderByAggregateInput;
};

export type AccountGroupScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.AccountGroupScalarWhereWithAggregatesInput
    | Prisma.AccountGroupScalarWhereWithAggregatesInput[];
  OR?: Prisma.AccountGroupScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.AccountGroupScalarWhereWithAggregatesInput
    | Prisma.AccountGroupScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"AccountGroup"> | string;
  name?: Prisma.StringWithAggregatesFilter<"AccountGroup"> | string;
  currencies?: Prisma.JsonWithAggregatesFilter<"AccountGroup">;
  description?: Prisma.StringNullableWithAggregatesFilter<"AccountGroup"> | string | null;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AccountGroup"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"AccountGroup"> | Date | string;
};

export type AccountGroupCreateInput = {
  id?: string;
  name: string;
  currencies: PrismaJson.AccountGroupCurrencyData[];
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  users?: Prisma.UserCreateNestedManyWithoutAccountGroupInput;
};

export type AccountGroupUncheckedCreateInput = {
  id?: string;
  name: string;
  currencies: PrismaJson.AccountGroupCurrencyData[];
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  users?: Prisma.UserUncheckedCreateNestedManyWithoutAccountGroupInput;
};

export type AccountGroupUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  currencies?: PrismaJson.AccountGroupCurrencyData[];
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  users?: Prisma.UserUpdateManyWithoutAccountGroupNestedInput;
};

export type AccountGroupUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  currencies?: PrismaJson.AccountGroupCurrencyData[];
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  users?: Prisma.UserUncheckedUpdateManyWithoutAccountGroupNestedInput;
};

export type AccountGroupCreateManyInput = {
  id?: string;
  name: string;
  currencies: PrismaJson.AccountGroupCurrencyData[];
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type AccountGroupUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  currencies?: PrismaJson.AccountGroupCurrencyData[];
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AccountGroupUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  currencies?: PrismaJson.AccountGroupCurrencyData[];
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AccountGroupNullableScalarRelationFilter = {
  is?: Prisma.AccountGroupWhereInput | null;
  isNot?: Prisma.AccountGroupWhereInput | null;
};

export type AccountGroupCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  currencies?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type AccountGroupMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type AccountGroupMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type AccountGroupCreateNestedOneWithoutUsersInput = {
  create?: Prisma.XOR<
    Prisma.AccountGroupCreateWithoutUsersInput,
    Prisma.AccountGroupUncheckedCreateWithoutUsersInput
  >;
  connectOrCreate?: Prisma.AccountGroupCreateOrConnectWithoutUsersInput;
  connect?: Prisma.AccountGroupWhereUniqueInput;
};

export type AccountGroupUpdateOneWithoutUsersNestedInput = {
  create?: Prisma.XOR<
    Prisma.AccountGroupCreateWithoutUsersInput,
    Prisma.AccountGroupUncheckedCreateWithoutUsersInput
  >;
  connectOrCreate?: Prisma.AccountGroupCreateOrConnectWithoutUsersInput;
  upsert?: Prisma.AccountGroupUpsertWithoutUsersInput;
  disconnect?: Prisma.AccountGroupWhereInput | boolean;
  delete?: Prisma.AccountGroupWhereInput | boolean;
  connect?: Prisma.AccountGroupWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.AccountGroupUpdateToOneWithWhereWithoutUsersInput,
      Prisma.AccountGroupUpdateWithoutUsersInput
    >,
    Prisma.AccountGroupUncheckedUpdateWithoutUsersInput
  >;
};

export type AccountGroupCreateWithoutUsersInput = {
  id?: string;
  name: string;
  currencies: PrismaJson.AccountGroupCurrencyData[];
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type AccountGroupUncheckedCreateWithoutUsersInput = {
  id?: string;
  name: string;
  currencies: PrismaJson.AccountGroupCurrencyData[];
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type AccountGroupCreateOrConnectWithoutUsersInput = {
  where: Prisma.AccountGroupWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AccountGroupCreateWithoutUsersInput,
    Prisma.AccountGroupUncheckedCreateWithoutUsersInput
  >;
};

export type AccountGroupUpsertWithoutUsersInput = {
  update: Prisma.XOR<
    Prisma.AccountGroupUpdateWithoutUsersInput,
    Prisma.AccountGroupUncheckedUpdateWithoutUsersInput
  >;
  create: Prisma.XOR<
    Prisma.AccountGroupCreateWithoutUsersInput,
    Prisma.AccountGroupUncheckedCreateWithoutUsersInput
  >;
  where?: Prisma.AccountGroupWhereInput;
};

export type AccountGroupUpdateToOneWithWhereWithoutUsersInput = {
  where?: Prisma.AccountGroupWhereInput;
  data: Prisma.XOR<
    Prisma.AccountGroupUpdateWithoutUsersInput,
    Prisma.AccountGroupUncheckedUpdateWithoutUsersInput
  >;
};

export type AccountGroupUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  currencies?: PrismaJson.AccountGroupCurrencyData[];
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AccountGroupUncheckedUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  currencies?: PrismaJson.AccountGroupCurrencyData[];
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type AccountGroupCountOutputType
 */

export type AccountGroupCountOutputType = {
  users: number;
};

export type AccountGroupCountOutputTypeSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  users?: boolean | AccountGroupCountOutputTypeCountUsersArgs;
};

/**
 * AccountGroupCountOutputType without action
 */
export type AccountGroupCountOutputTypeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccountGroupCountOutputType
   */
  select?: Prisma.AccountGroupCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * AccountGroupCountOutputType without action
 */
export type AccountGroupCountOutputTypeCountUsersArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  where?: Prisma.UserWhereInput;
};

export type AccountGroupSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    currencies?: boolean;
    description?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    users?: boolean | Prisma.AccountGroup$usersArgs<ExtArgs>;
    _count?: boolean | Prisma.AccountGroupCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["accountGroup"]
>;

export type AccountGroupSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    currencies?: boolean;
    description?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs["result"]["accountGroup"]
>;

export type AccountGroupSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    currencies?: boolean;
    description?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs["result"]["accountGroup"]
>;

export type AccountGroupSelectScalar = {
  id?: boolean;
  name?: boolean;
  currencies?: boolean;
  description?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type AccountGroupOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = runtime.Types.Extensions.GetOmit<
  "id" | "name" | "currencies" | "description" | "createdAt" | "updatedAt",
  ExtArgs["result"]["accountGroup"]
>;
export type AccountGroupInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  users?: boolean | Prisma.AccountGroup$usersArgs<ExtArgs>;
  _count?: boolean | Prisma.AccountGroupCountOutputTypeDefaultArgs<ExtArgs>;
};
export type AccountGroupIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {};
export type AccountGroupIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {};

export type $AccountGroupPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  name: "AccountGroup";
  objects: {
    users: Prisma.$UserPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      /**
       * [AccountGroupCurrencyData[]]
       */
      currencies: PrismaJson.AccountGroupCurrencyData[];
      description: string | null;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["accountGroup"]
  >;
  composites: {};
};

export type AccountGroupGetPayload<S extends boolean | null | undefined | AccountGroupDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$AccountGroupPayload, S>;

export type AccountGroupCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = Omit<AccountGroupFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: AccountGroupCountAggregateInputType | true;
};

export interface AccountGroupDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["AccountGroup"];
    meta: { name: "AccountGroup" };
  };
  /**
   * Find zero or one AccountGroup that matches the filter.
   * @param {AccountGroupFindUniqueArgs} args - Arguments to find a AccountGroup
   * @example
   * // Get one AccountGroup
   * const accountGroup = await prisma.accountGroup.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AccountGroupFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AccountGroupFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__AccountGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountGroupPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one AccountGroup that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AccountGroupFindUniqueOrThrowArgs} args - Arguments to find a AccountGroup
   * @example
   * // Get one AccountGroup
   * const accountGroup = await prisma.accountGroup.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AccountGroupFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, AccountGroupFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__AccountGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountGroupPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AccountGroup that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountGroupFindFirstArgs} args - Arguments to find a AccountGroup
   * @example
   * // Get one AccountGroup
   * const accountGroup = await prisma.accountGroup.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AccountGroupFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AccountGroupFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__AccountGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountGroupPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AccountGroup that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountGroupFindFirstOrThrowArgs} args - Arguments to find a AccountGroup
   * @example
   * // Get one AccountGroup
   * const accountGroup = await prisma.accountGroup.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AccountGroupFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, AccountGroupFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__AccountGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountGroupPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more AccountGroups that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountGroupFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AccountGroups
   * const accountGroups = await prisma.accountGroup.findMany()
   *
   * // Get first 10 AccountGroups
   * const accountGroups = await prisma.accountGroup.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const accountGroupWithIdOnly = await prisma.accountGroup.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AccountGroupFindManyArgs>(
    args?: Prisma.SelectSubset<T, AccountGroupFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AccountGroupPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a AccountGroup.
   * @param {AccountGroupCreateArgs} args - Arguments to create a AccountGroup.
   * @example
   * // Create one AccountGroup
   * const AccountGroup = await prisma.accountGroup.create({
   *   data: {
   *     // ... data to create a AccountGroup
   *   }
   * })
   *
   */
  create<T extends AccountGroupCreateArgs>(
    args: Prisma.SelectSubset<T, AccountGroupCreateArgs<ExtArgs>>
  ): Prisma.Prisma__AccountGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountGroupPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many AccountGroups.
   * @param {AccountGroupCreateManyArgs} args - Arguments to create many AccountGroups.
   * @example
   * // Create many AccountGroups
   * const accountGroup = await prisma.accountGroup.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AccountGroupCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AccountGroupCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many AccountGroups and returns the data saved in the database.
   * @param {AccountGroupCreateManyAndReturnArgs} args - Arguments to create many AccountGroups.
   * @example
   * // Create many AccountGroups
   * const accountGroup = await prisma.accountGroup.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many AccountGroups and only return the `id`
   * const accountGroupWithIdOnly = await prisma.accountGroup.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AccountGroupCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, AccountGroupCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AccountGroupPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a AccountGroup.
   * @param {AccountGroupDeleteArgs} args - Arguments to delete one AccountGroup.
   * @example
   * // Delete one AccountGroup
   * const AccountGroup = await prisma.accountGroup.delete({
   *   where: {
   *     // ... filter to delete one AccountGroup
   *   }
   * })
   *
   */
  delete<T extends AccountGroupDeleteArgs>(
    args: Prisma.SelectSubset<T, AccountGroupDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__AccountGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountGroupPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one AccountGroup.
   * @param {AccountGroupUpdateArgs} args - Arguments to update one AccountGroup.
   * @example
   * // Update one AccountGroup
   * const accountGroup = await prisma.accountGroup.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AccountGroupUpdateArgs>(
    args: Prisma.SelectSubset<T, AccountGroupUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__AccountGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountGroupPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more AccountGroups.
   * @param {AccountGroupDeleteManyArgs} args - Arguments to filter AccountGroups to delete.
   * @example
   * // Delete a few AccountGroups
   * const { count } = await prisma.accountGroup.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AccountGroupDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AccountGroupDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AccountGroups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountGroupUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AccountGroups
   * const accountGroup = await prisma.accountGroup.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AccountGroupUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AccountGroupUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AccountGroups and returns the data updated in the database.
   * @param {AccountGroupUpdateManyAndReturnArgs} args - Arguments to update many AccountGroups.
   * @example
   * // Update many AccountGroups
   * const accountGroup = await prisma.accountGroup.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more AccountGroups and only return the `id`
   * const accountGroupWithIdOnly = await prisma.accountGroup.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AccountGroupUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, AccountGroupUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AccountGroupPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one AccountGroup.
   * @param {AccountGroupUpsertArgs} args - Arguments to update or create a AccountGroup.
   * @example
   * // Update or create a AccountGroup
   * const accountGroup = await prisma.accountGroup.upsert({
   *   create: {
   *     // ... data to create a AccountGroup
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AccountGroup we want to update
   *   }
   * })
   */
  upsert<T extends AccountGroupUpsertArgs>(
    args: Prisma.SelectSubset<T, AccountGroupUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__AccountGroupClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccountGroupPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of AccountGroups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountGroupCountArgs} args - Arguments to filter AccountGroups to count.
   * @example
   * // Count the number of AccountGroups
   * const count = await prisma.accountGroup.count({
   *   where: {
   *     // ... the filter for the AccountGroups we want to count
   *   }
   * })
   **/
  count<T extends AccountGroupCountArgs>(
    args?: Prisma.Subset<T, AccountGroupCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], AccountGroupCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a AccountGroup.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountGroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AccountGroupAggregateArgs>(
    args: Prisma.Subset<T, AccountGroupAggregateArgs>
  ): Prisma.PrismaPromise<GetAccountGroupAggregateType<T>>;

  /**
   * Group by AccountGroup.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountGroupGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AccountGroupGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AccountGroupGroupByArgs["orderBy"] }
      : { orderBy?: AccountGroupGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, "Field ", P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
  >(
    args: Prisma.SubsetIntersection<T, AccountGroupGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetAccountGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the AccountGroup model
   */
  readonly fields: AccountGroupFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AccountGroup.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AccountGroupClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  users<T extends Prisma.AccountGroup$usersArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.AccountGroup$usersArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the AccountGroup model
 */
export interface AccountGroupFieldRefs {
  readonly id: Prisma.FieldRef<"AccountGroup", "String">;
  readonly name: Prisma.FieldRef<"AccountGroup", "String">;
  readonly currencies: Prisma.FieldRef<"AccountGroup", "Json">;
  readonly description: Prisma.FieldRef<"AccountGroup", "String">;
  readonly createdAt: Prisma.FieldRef<"AccountGroup", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"AccountGroup", "DateTime">;
}

// Custom InputTypes
/**
 * AccountGroup findUnique
 */
export type AccountGroupFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccountGroup
   */
  select?: Prisma.AccountGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountGroup
   */
  omit?: Prisma.AccountGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountGroupInclude<ExtArgs> | null;
  /**
   * Filter, which AccountGroup to fetch.
   */
  where: Prisma.AccountGroupWhereUniqueInput;
};

/**
 * AccountGroup findUniqueOrThrow
 */
export type AccountGroupFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccountGroup
   */
  select?: Prisma.AccountGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountGroup
   */
  omit?: Prisma.AccountGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountGroupInclude<ExtArgs> | null;
  /**
   * Filter, which AccountGroup to fetch.
   */
  where: Prisma.AccountGroupWhereUniqueInput;
};

/**
 * AccountGroup findFirst
 */
export type AccountGroupFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccountGroup
   */
  select?: Prisma.AccountGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountGroup
   */
  omit?: Prisma.AccountGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountGroupInclude<ExtArgs> | null;
  /**
   * Filter, which AccountGroup to fetch.
   */
  where?: Prisma.AccountGroupWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccountGroups to fetch.
   */
  orderBy?:
    | Prisma.AccountGroupOrderByWithRelationInput
    | Prisma.AccountGroupOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AccountGroups.
   */
  cursor?: Prisma.AccountGroupWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccountGroups from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccountGroups.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AccountGroups.
   */
  distinct?: Prisma.AccountGroupScalarFieldEnum | Prisma.AccountGroupScalarFieldEnum[];
};

/**
 * AccountGroup findFirstOrThrow
 */
export type AccountGroupFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccountGroup
   */
  select?: Prisma.AccountGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountGroup
   */
  omit?: Prisma.AccountGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountGroupInclude<ExtArgs> | null;
  /**
   * Filter, which AccountGroup to fetch.
   */
  where?: Prisma.AccountGroupWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccountGroups to fetch.
   */
  orderBy?:
    | Prisma.AccountGroupOrderByWithRelationInput
    | Prisma.AccountGroupOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AccountGroups.
   */
  cursor?: Prisma.AccountGroupWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccountGroups from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccountGroups.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AccountGroups.
   */
  distinct?: Prisma.AccountGroupScalarFieldEnum | Prisma.AccountGroupScalarFieldEnum[];
};

/**
 * AccountGroup findMany
 */
export type AccountGroupFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccountGroup
   */
  select?: Prisma.AccountGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountGroup
   */
  omit?: Prisma.AccountGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountGroupInclude<ExtArgs> | null;
  /**
   * Filter, which AccountGroups to fetch.
   */
  where?: Prisma.AccountGroupWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccountGroups to fetch.
   */
  orderBy?:
    | Prisma.AccountGroupOrderByWithRelationInput
    | Prisma.AccountGroupOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing AccountGroups.
   */
  cursor?: Prisma.AccountGroupWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccountGroups from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccountGroups.
   */
  skip?: number;
  distinct?: Prisma.AccountGroupScalarFieldEnum | Prisma.AccountGroupScalarFieldEnum[];
};

/**
 * AccountGroup create
 */
export type AccountGroupCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccountGroup
   */
  select?: Prisma.AccountGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountGroup
   */
  omit?: Prisma.AccountGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountGroupInclude<ExtArgs> | null;
  /**
   * The data needed to create a AccountGroup.
   */
  data: Prisma.XOR<Prisma.AccountGroupCreateInput, Prisma.AccountGroupUncheckedCreateInput>;
};

/**
 * AccountGroup createMany
 */
export type AccountGroupCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to create many AccountGroups.
   */
  data: Prisma.AccountGroupCreateManyInput | Prisma.AccountGroupCreateManyInput[];
};

/**
 * AccountGroup createManyAndReturn
 */
export type AccountGroupCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccountGroup
   */
  select?: Prisma.AccountGroupSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountGroup
   */
  omit?: Prisma.AccountGroupOmit<ExtArgs> | null;
  /**
   * The data used to create many AccountGroups.
   */
  data: Prisma.AccountGroupCreateManyInput | Prisma.AccountGroupCreateManyInput[];
};

/**
 * AccountGroup update
 */
export type AccountGroupUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccountGroup
   */
  select?: Prisma.AccountGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountGroup
   */
  omit?: Prisma.AccountGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountGroupInclude<ExtArgs> | null;
  /**
   * The data needed to update a AccountGroup.
   */
  data: Prisma.XOR<Prisma.AccountGroupUpdateInput, Prisma.AccountGroupUncheckedUpdateInput>;
  /**
   * Choose, which AccountGroup to update.
   */
  where: Prisma.AccountGroupWhereUniqueInput;
};

/**
 * AccountGroup updateMany
 */
export type AccountGroupUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * The data used to update AccountGroups.
   */
  data: Prisma.XOR<
    Prisma.AccountGroupUpdateManyMutationInput,
    Prisma.AccountGroupUncheckedUpdateManyInput
  >;
  /**
   * Filter which AccountGroups to update
   */
  where?: Prisma.AccountGroupWhereInput;
  /**
   * Limit how many AccountGroups to update.
   */
  limit?: number;
};

/**
 * AccountGroup updateManyAndReturn
 */
export type AccountGroupUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccountGroup
   */
  select?: Prisma.AccountGroupSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountGroup
   */
  omit?: Prisma.AccountGroupOmit<ExtArgs> | null;
  /**
   * The data used to update AccountGroups.
   */
  data: Prisma.XOR<
    Prisma.AccountGroupUpdateManyMutationInput,
    Prisma.AccountGroupUncheckedUpdateManyInput
  >;
  /**
   * Filter which AccountGroups to update
   */
  where?: Prisma.AccountGroupWhereInput;
  /**
   * Limit how many AccountGroups to update.
   */
  limit?: number;
};

/**
 * AccountGroup upsert
 */
export type AccountGroupUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccountGroup
   */
  select?: Prisma.AccountGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountGroup
   */
  omit?: Prisma.AccountGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountGroupInclude<ExtArgs> | null;
  /**
   * The filter to search for the AccountGroup to update in case it exists.
   */
  where: Prisma.AccountGroupWhereUniqueInput;
  /**
   * In case the AccountGroup found by the `where` argument doesn't exist, create a new AccountGroup with this data.
   */
  create: Prisma.XOR<Prisma.AccountGroupCreateInput, Prisma.AccountGroupUncheckedCreateInput>;
  /**
   * In case the AccountGroup was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AccountGroupUpdateInput, Prisma.AccountGroupUncheckedUpdateInput>;
};

/**
 * AccountGroup delete
 */
export type AccountGroupDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccountGroup
   */
  select?: Prisma.AccountGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountGroup
   */
  omit?: Prisma.AccountGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountGroupInclude<ExtArgs> | null;
  /**
   * Filter which AccountGroup to delete.
   */
  where: Prisma.AccountGroupWhereUniqueInput;
};

/**
 * AccountGroup deleteMany
 */
export type AccountGroupDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Filter which AccountGroups to delete
   */
  where?: Prisma.AccountGroupWhereInput;
  /**
   * Limit how many AccountGroups to delete.
   */
  limit?: number;
};

/**
 * AccountGroup.users
 */
export type AccountGroup$usersArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[];
  cursor?: Prisma.UserWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[];
};

/**
 * AccountGroup without action
 */
export type AccountGroupDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> = {
  /**
   * Select specific fields to fetch from the AccountGroup
   */
  select?: Prisma.AccountGroupSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccountGroup
   */
  omit?: Prisma.AccountGroupOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountGroupInclude<ExtArgs> | null;
};
