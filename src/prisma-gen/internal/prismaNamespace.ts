/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library";
import type * as Prisma from "../models";
import { type PrismaClient } from "./class.js";

export type * from "../models";

export type DMMF = typeof runtime.DMMF;

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>;

/**
 * Validator
 */
export const validator = runtime.Public.validator;

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError;
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError;

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError;
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError;

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError;
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError;

export const PrismaClientValidationError = runtime.PrismaClientValidationError;
export type PrismaClientValidationError = runtime.PrismaClientValidationError;

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag;
export const empty = runtime.empty;
export const join = runtime.join;
export const raw = runtime.raw;
export const Sql = runtime.Sql;
export type Sql = runtime.Sql;

/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal;
export type Decimal = runtime.Decimal;

export type DecimalJsLike = runtime.DecimalJsLike;

/**
 * Metrics
 */
export type Metrics = runtime.Metrics;
export type Metric<T> = runtime.Metric<T>;
export type MetricHistogram = runtime.MetricHistogram;
export type MetricHistogramBucket = runtime.MetricHistogramBucket;

/**
 * Extensions
 */
export type Extension = runtime.Types.Extensions.UserArgs;
export const getExtensionContext = runtime.Extensions.getExtensionContext;
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>;
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>;
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>;
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>;

export type PrismaVersion = {
  client: string;
  engine: string;
};

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
export const prismaVersion: PrismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
};

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject;
export type JsonArray = runtime.JsonArray;
export type JsonValue = runtime.JsonValue;
export type InputJsonObject = runtime.InputJsonObject;
export type InputJsonArray = runtime.InputJsonArray;
export type InputJsonValue = runtime.InputJsonValue;

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as new (
    secret: never
  ) => typeof runtime.objectEnumValues.instances.DbNull,
  JsonNull: runtime.objectEnumValues.classes.JsonNull as new (
    secret: never
  ) => typeof runtime.objectEnumValues.instances.JsonNull,
  AnyNull: runtime.objectEnumValues.classes.AnyNull as new (
    secret: never
  ) => typeof runtime.objectEnumValues.instances.AnyNull
};

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull;

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull;

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull;

type SelectAndInclude = {
  select: any;
  include: any;
};

type SelectAndOmit = {
  select: any;
  omit: any;
};

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
  [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
} & (T extends SelectAndInclude
  ? "Please either choose `select` or `include`."
  : T extends SelectAndOmit
    ? "Please either choose `select` or `omit`."
    : {});

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
} & K;

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> = T extends object
  ? U extends object
    ? (Without<T, U> & U) | (Without<U, T> & T)
    : U
  : T;

/**
 * Is T a Record?
 */
type IsObject<T extends any> =
  T extends Array<any>
    ? False
    : T extends Date
      ? False
      : T extends Uint8Array
        ? False
        : T extends BigInt
          ? False
          : T extends object
            ? True
            : False;

/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T;

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O>; // With K possibilities
  }[K];

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>;

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>;

type _Either<O extends object, K extends Key, strict extends Boolean> = {
  1: EitherStrict<O, K>;
  0: EitherLoose<O, K>;
}[strict];

export type Either<O extends object, K extends Key, strict extends Boolean = 1> = O extends unknown
  ? _Either<O, K, strict>
  : never;

export type Union = any;

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K];
} & {};

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (U extends unknown ? (k: U) => void : never) extends (
  k: infer I
) => void
  ? I
  : never;

export type Overwrite<O extends object, O1 extends object> = {
  [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<
  Overwrite<
    U,
    {
      [K in keyof U]-?: At<U, K>;
    }
  >
>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
  1: AtStrict<O, K>;
  0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function
  ? A
  : {
      [K in keyof A]: A[K];
    } & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
    ?
        | (K extends keyof O ? { [P in K]: O[P] } & O : O)
        | ({ [P in keyof O as P extends K ? P : never]-?: O[P] } & O)
    : never
>;

type _Strict<U, _U = U> = U extends unknown
  ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>>
  : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False;

export type True = 1;

export type False = 0;

export type Not<B extends Boolean> = {
  0: 1;
  1: 0;
}[B];

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
    ? 1
    : 0;

export type Has<U extends Union, U1 extends Union> = Not<Extends<Exclude<U1, U>, U1>>;

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0;
    1: 1;
  };
  1: {
    0: 1;
    1: 1;
  };
}[B1][B2];

export type Keys<U extends Union> = U extends unknown ? keyof U : never;

export type GetScalarType<T, O> = O extends object
  ? {
      [P in keyof T]: P extends keyof O ? O[P] : never;
    }
  : never;

type FieldPaths<T, U = Omit<T, "_avg" | "_sum" | "_count" | "_min" | "_max">> =
  IsObject<T> extends True ? U : T;

export type GetHavingFields<T> = {
  [K in keyof T]: Or<Or<Extends<"OR", K>, Extends<"AND", K>>, Extends<"NOT", K>> extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
      ? never
      : K;
}[keyof T];

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never;
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>;
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T;

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<
  T,
  MaybeTupleToUnion<K>
>;

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T;

export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>;

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>;

export const ModelName = {
  User: "User",
  Account: "Account",
  AccountGroup: "AccountGroup",
  Token: "Token",
  InvestmentPlan: "InvestmentPlan",
  Investment: "Investment",
  Profit: "Profit",
  Transaction: "Transaction",
  Currency: "Currency",
  Notification: "Notification",
  Faq: "Faq",
  Ban: "Ban"
} as const;

export type ModelName = (typeof ModelName)[keyof typeof ModelName];

export interface TypeMapCb<ClientOptions = {}>
  extends runtime.Types.Utils.Fn<
    { extArgs: runtime.Types.Extensions.InternalArgs },
    runtime.Types.Utils.Record<string, any>
  > {
  returns: TypeMap<
    this["params"]["extArgs"],
    ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}
  >;
}

export type TypeMap<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {}
> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions;
  };
  meta: {
    modelProps:
      | "user"
      | "account"
      | "accountGroup"
      | "token"
      | "investmentPlan"
      | "investment"
      | "profit"
      | "transaction"
      | "currency"
      | "notification"
      | "faq"
      | "ban";
    txIsolationLevel: TransactionIsolationLevel;
  };
  model: {
    User: {
      payload: Prisma.$UserPayload<ExtArgs>;
      fields: Prisma.UserFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[];
        };
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[];
        };
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[];
        };
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>;
        };
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[];
        };
        count: {
          args: Prisma.UserCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number;
        };
      };
    };
    Account: {
      payload: Prisma.$AccountPayload<ExtArgs>;
      fields: Prisma.AccountFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.AccountFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        findFirst: {
          args: Prisma.AccountFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        findMany: {
          args: Prisma.AccountFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[];
        };
        create: {
          args: Prisma.AccountCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        createMany: {
          args: Prisma.AccountCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[];
        };
        delete: {
          args: Prisma.AccountDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        update: {
          args: Prisma.AccountUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        deleteMany: {
          args: Prisma.AccountDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.AccountUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[];
        };
        upsert: {
          args: Prisma.AccountUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        aggregate: {
          args: Prisma.AccountAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateAccount>;
        };
        groupBy: {
          args: Prisma.AccountGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AccountGroupByOutputType>[];
        };
        count: {
          args: Prisma.AccountCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AccountCountAggregateOutputType> | number;
        };
      };
    };
    AccountGroup: {
      payload: Prisma.$AccountGroupPayload<ExtArgs>;
      fields: Prisma.AccountGroupFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.AccountGroupFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountGroupPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.AccountGroupFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountGroupPayload>;
        };
        findFirst: {
          args: Prisma.AccountGroupFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountGroupPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.AccountGroupFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountGroupPayload>;
        };
        findMany: {
          args: Prisma.AccountGroupFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountGroupPayload>[];
        };
        create: {
          args: Prisma.AccountGroupCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountGroupPayload>;
        };
        createMany: {
          args: Prisma.AccountGroupCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.AccountGroupCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountGroupPayload>[];
        };
        delete: {
          args: Prisma.AccountGroupDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountGroupPayload>;
        };
        update: {
          args: Prisma.AccountGroupUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountGroupPayload>;
        };
        deleteMany: {
          args: Prisma.AccountGroupDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.AccountGroupUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.AccountGroupUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountGroupPayload>[];
        };
        upsert: {
          args: Prisma.AccountGroupUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountGroupPayload>;
        };
        aggregate: {
          args: Prisma.AccountGroupAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateAccountGroup>;
        };
        groupBy: {
          args: Prisma.AccountGroupGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AccountGroupGroupByOutputType>[];
        };
        count: {
          args: Prisma.AccountGroupCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.AccountGroupCountAggregateOutputType>
            | number;
        };
      };
    };
    Token: {
      payload: Prisma.$TokenPayload<ExtArgs>;
      fields: Prisma.TokenFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.TokenFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.TokenFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>;
        };
        findFirst: {
          args: Prisma.TokenFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.TokenFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>;
        };
        findMany: {
          args: Prisma.TokenFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>[];
        };
        create: {
          args: Prisma.TokenCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>;
        };
        createMany: {
          args: Prisma.TokenCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.TokenCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>[];
        };
        delete: {
          args: Prisma.TokenDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>;
        };
        update: {
          args: Prisma.TokenUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>;
        };
        deleteMany: {
          args: Prisma.TokenDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.TokenUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.TokenUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>[];
        };
        upsert: {
          args: Prisma.TokenUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>;
        };
        aggregate: {
          args: Prisma.TokenAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateToken>;
        };
        groupBy: {
          args: Prisma.TokenGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.TokenGroupByOutputType>[];
        };
        count: {
          args: Prisma.TokenCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.TokenCountAggregateOutputType> | number;
        };
      };
    };
    InvestmentPlan: {
      payload: Prisma.$InvestmentPlanPayload<ExtArgs>;
      fields: Prisma.InvestmentPlanFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.InvestmentPlanFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPlanPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.InvestmentPlanFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPlanPayload>;
        };
        findFirst: {
          args: Prisma.InvestmentPlanFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPlanPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.InvestmentPlanFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPlanPayload>;
        };
        findMany: {
          args: Prisma.InvestmentPlanFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPlanPayload>[];
        };
        create: {
          args: Prisma.InvestmentPlanCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPlanPayload>;
        };
        createMany: {
          args: Prisma.InvestmentPlanCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.InvestmentPlanCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPlanPayload>[];
        };
        delete: {
          args: Prisma.InvestmentPlanDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPlanPayload>;
        };
        update: {
          args: Prisma.InvestmentPlanUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPlanPayload>;
        };
        deleteMany: {
          args: Prisma.InvestmentPlanDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.InvestmentPlanUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.InvestmentPlanUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPlanPayload>[];
        };
        upsert: {
          args: Prisma.InvestmentPlanUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPlanPayload>;
        };
        aggregate: {
          args: Prisma.InvestmentPlanAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateInvestmentPlan>;
        };
        groupBy: {
          args: Prisma.InvestmentPlanGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.InvestmentPlanGroupByOutputType>[];
        };
        count: {
          args: Prisma.InvestmentPlanCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.InvestmentPlanCountAggregateOutputType>
            | number;
        };
      };
    };
    Investment: {
      payload: Prisma.$InvestmentPayload<ExtArgs>;
      fields: Prisma.InvestmentFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.InvestmentFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.InvestmentFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPayload>;
        };
        findFirst: {
          args: Prisma.InvestmentFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.InvestmentFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPayload>;
        };
        findMany: {
          args: Prisma.InvestmentFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPayload>[];
        };
        create: {
          args: Prisma.InvestmentCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPayload>;
        };
        createMany: {
          args: Prisma.InvestmentCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.InvestmentCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPayload>[];
        };
        delete: {
          args: Prisma.InvestmentDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPayload>;
        };
        update: {
          args: Prisma.InvestmentUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPayload>;
        };
        deleteMany: {
          args: Prisma.InvestmentDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.InvestmentUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.InvestmentUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPayload>[];
        };
        upsert: {
          args: Prisma.InvestmentUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvestmentPayload>;
        };
        aggregate: {
          args: Prisma.InvestmentAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateInvestment>;
        };
        groupBy: {
          args: Prisma.InvestmentGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.InvestmentGroupByOutputType>[];
        };
        count: {
          args: Prisma.InvestmentCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.InvestmentCountAggregateOutputType> | number;
        };
      };
    };
    Profit: {
      payload: Prisma.$ProfitPayload<ExtArgs>;
      fields: Prisma.ProfitFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.ProfitFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfitPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.ProfitFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfitPayload>;
        };
        findFirst: {
          args: Prisma.ProfitFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfitPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.ProfitFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfitPayload>;
        };
        findMany: {
          args: Prisma.ProfitFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfitPayload>[];
        };
        create: {
          args: Prisma.ProfitCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfitPayload>;
        };
        createMany: {
          args: Prisma.ProfitCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.ProfitCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfitPayload>[];
        };
        delete: {
          args: Prisma.ProfitDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfitPayload>;
        };
        update: {
          args: Prisma.ProfitUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfitPayload>;
        };
        deleteMany: {
          args: Prisma.ProfitDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.ProfitUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.ProfitUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfitPayload>[];
        };
        upsert: {
          args: Prisma.ProfitUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfitPayload>;
        };
        aggregate: {
          args: Prisma.ProfitAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateProfit>;
        };
        groupBy: {
          args: Prisma.ProfitGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ProfitGroupByOutputType>[];
        };
        count: {
          args: Prisma.ProfitCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ProfitCountAggregateOutputType> | number;
        };
      };
    };
    Transaction: {
      payload: Prisma.$TransactionPayload<ExtArgs>;
      fields: Prisma.TransactionFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.TransactionFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>;
        };
        findFirst: {
          args: Prisma.TransactionFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>;
        };
        findMany: {
          args: Prisma.TransactionFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>[];
        };
        create: {
          args: Prisma.TransactionCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>;
        };
        createMany: {
          args: Prisma.TransactionCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.TransactionCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>[];
        };
        delete: {
          args: Prisma.TransactionDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>;
        };
        update: {
          args: Prisma.TransactionUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>;
        };
        deleteMany: {
          args: Prisma.TransactionDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.TransactionUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.TransactionUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>[];
        };
        upsert: {
          args: Prisma.TransactionUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>;
        };
        aggregate: {
          args: Prisma.TransactionAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateTransaction>;
        };
        groupBy: {
          args: Prisma.TransactionGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.TransactionGroupByOutputType>[];
        };
        count: {
          args: Prisma.TransactionCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.TransactionCountAggregateOutputType> | number;
        };
      };
    };
    Currency: {
      payload: Prisma.$CurrencyPayload<ExtArgs>;
      fields: Prisma.CurrencyFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.CurrencyFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CurrencyPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.CurrencyFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CurrencyPayload>;
        };
        findFirst: {
          args: Prisma.CurrencyFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CurrencyPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.CurrencyFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CurrencyPayload>;
        };
        findMany: {
          args: Prisma.CurrencyFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CurrencyPayload>[];
        };
        create: {
          args: Prisma.CurrencyCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CurrencyPayload>;
        };
        createMany: {
          args: Prisma.CurrencyCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.CurrencyCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CurrencyPayload>[];
        };
        delete: {
          args: Prisma.CurrencyDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CurrencyPayload>;
        };
        update: {
          args: Prisma.CurrencyUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CurrencyPayload>;
        };
        deleteMany: {
          args: Prisma.CurrencyDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.CurrencyUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.CurrencyUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CurrencyPayload>[];
        };
        upsert: {
          args: Prisma.CurrencyUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CurrencyPayload>;
        };
        aggregate: {
          args: Prisma.CurrencyAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateCurrency>;
        };
        groupBy: {
          args: Prisma.CurrencyGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.CurrencyGroupByOutputType>[];
        };
        count: {
          args: Prisma.CurrencyCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.CurrencyCountAggregateOutputType> | number;
        };
      };
    };
    Notification: {
      payload: Prisma.$NotificationPayload<ExtArgs>;
      fields: Prisma.NotificationFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.NotificationFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>;
        };
        findFirst: {
          args: Prisma.NotificationFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>;
        };
        findMany: {
          args: Prisma.NotificationFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>[];
        };
        create: {
          args: Prisma.NotificationCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>;
        };
        createMany: {
          args: Prisma.NotificationCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>[];
        };
        delete: {
          args: Prisma.NotificationDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>;
        };
        update: {
          args: Prisma.NotificationUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>;
        };
        deleteMany: {
          args: Prisma.NotificationDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.NotificationUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>[];
        };
        upsert: {
          args: Prisma.NotificationUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>;
        };
        aggregate: {
          args: Prisma.NotificationAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateNotification>;
        };
        groupBy: {
          args: Prisma.NotificationGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.NotificationGroupByOutputType>[];
        };
        count: {
          args: Prisma.NotificationCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.NotificationCountAggregateOutputType>
            | number;
        };
      };
    };
    Faq: {
      payload: Prisma.$FaqPayload<ExtArgs>;
      fields: Prisma.FaqFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.FaqFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FaqPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.FaqFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FaqPayload>;
        };
        findFirst: {
          args: Prisma.FaqFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FaqPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.FaqFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FaqPayload>;
        };
        findMany: {
          args: Prisma.FaqFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FaqPayload>[];
        };
        create: {
          args: Prisma.FaqCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FaqPayload>;
        };
        createMany: {
          args: Prisma.FaqCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.FaqCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FaqPayload>[];
        };
        delete: {
          args: Prisma.FaqDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FaqPayload>;
        };
        update: {
          args: Prisma.FaqUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FaqPayload>;
        };
        deleteMany: {
          args: Prisma.FaqDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.FaqUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.FaqUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FaqPayload>[];
        };
        upsert: {
          args: Prisma.FaqUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FaqPayload>;
        };
        aggregate: {
          args: Prisma.FaqAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateFaq>;
        };
        groupBy: {
          args: Prisma.FaqGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.FaqGroupByOutputType>[];
        };
        count: {
          args: Prisma.FaqCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.FaqCountAggregateOutputType> | number;
        };
      };
    };
    Ban: {
      payload: Prisma.$BanPayload<ExtArgs>;
      fields: Prisma.BanFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.BanFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BanPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.BanFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BanPayload>;
        };
        findFirst: {
          args: Prisma.BanFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BanPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.BanFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BanPayload>;
        };
        findMany: {
          args: Prisma.BanFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BanPayload>[];
        };
        create: {
          args: Prisma.BanCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BanPayload>;
        };
        createMany: {
          args: Prisma.BanCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.BanCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BanPayload>[];
        };
        delete: {
          args: Prisma.BanDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BanPayload>;
        };
        update: {
          args: Prisma.BanUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BanPayload>;
        };
        deleteMany: {
          args: Prisma.BanDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.BanUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.BanUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BanPayload>[];
        };
        upsert: {
          args: Prisma.BanUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BanPayload>;
        };
        aggregate: {
          args: Prisma.BanAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateBan>;
        };
        groupBy: {
          args: Prisma.BanGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.BanGroupByOutputType>[];
        };
        count: {
          args: Prisma.BanCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.BanCountAggregateOutputType> | number;
        };
      };
    };
  };
} & {
  other: {
    payload: any;
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]];
        result: any;
      };
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]];
        result: any;
      };
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]];
        result: any;
      };
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]];
        result: any;
      };
    };
  };
};

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  Serializable: "Serializable"
} as const);

export type TransactionIsolationLevel =
  (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel];

export const UserScalarFieldEnum = {
  id: "id",
  name: "name",
  email: "email",
  password: "password",
  verified: "verified",
  role: "role",
  accountGroupId: "accountGroupId",
  image: "image",
  phoneNumber: "phoneNumber",
  address: "address",
  country: "country",
  region: "region",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  ipAddresses: "ipAddresses",
  devices: "devices",
  isBanned: "isBanned"
} as const;

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum];

export const AccountScalarFieldEnum = {
  id: "id",
  userId: "userId",
  walletBalance: "walletBalance",
  kycIdType: "kycIdType",
  kycDocument: "kycDocument",
  kycDocumentExt: "kycDocumentExt",
  kycStatus: "kycStatus",
  kycSubmittedAt: "kycSubmittedAt",
  kycVerifiedAt: "kycVerifiedAt",
  createdAt: "createdAt",
  updatedAt: "updatedAt"
} as const;

export type AccountScalarFieldEnum =
  (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum];

export const AccountGroupScalarFieldEnum = {
  id: "id",
  name: "name",
  currencies: "currencies",
  description: "description",
  createdAt: "createdAt",
  updatedAt: "updatedAt"
} as const;

export type AccountGroupScalarFieldEnum =
  (typeof AccountGroupScalarFieldEnum)[keyof typeof AccountGroupScalarFieldEnum];

export const TokenScalarFieldEnum = {
  id: "id",
  userId: "userId",
  value: "value",
  expiresIn: "expiresIn",
  createdAt: "createdAt",
  updatedAt: "updatedAt"
} as const;

export type TokenScalarFieldEnum = (typeof TokenScalarFieldEnum)[keyof typeof TokenScalarFieldEnum];

export const InvestmentPlanScalarFieldEnum = {
  id: "id",
  name: "name",
  slug: "slug",
  image: "image",
  tiers: "tiers",
  createdAt: "createdAt",
  updatedAt: "updatedAt"
} as const;

export type InvestmentPlanScalarFieldEnum =
  (typeof InvestmentPlanScalarFieldEnum)[keyof typeof InvestmentPlanScalarFieldEnum];

export const InvestmentScalarFieldEnum = {
  id: "id",
  userId: "userId",
  autocompounded: "autocompounded",
  investmentStatus: "investmentStatus",
  initialDeposit: "initialDeposit",
  expectedReturnRate: "expectedReturnRate",
  autocompoundedReturnRate: "autocompoundedReturnRate",
  expectedTotalReturns: "expectedTotalReturns",
  currentTotalReturns: "currentTotalReturns",
  currentCompoundedAmount: "currentCompoundedAmount",
  investmentName: "investmentName",
  investmentTier: "investmentTier",
  minimumDeposit: "minimumDeposit",
  duration: "duration",
  terminationFee: "terminationFee",
  daysCompleted: "daysCompleted",
  lastProfitDistributedAt: "lastProfitDistributedAt",
  lastProfitAmount: "lastProfitAmount",
  hasTransferedProfitToWallet: "hasTransferedProfitToWallet",
  closedAt: "closedAt",
  pausedAt: "pausedAt",
  pausedReason: "pausedReason",
  terminatedAt: "terminatedAt",
  terminator: "terminator",
  terminationReason: "terminationReason",
  terminationFeeApplied: "terminationFeeApplied",
  createdAt: "createdAt",
  updatedAt: "updatedAt"
} as const;

export type InvestmentScalarFieldEnum =
  (typeof InvestmentScalarFieldEnum)[keyof typeof InvestmentScalarFieldEnum];

export const ProfitScalarFieldEnum = {
  id: "id",
  userId: "userId",
  accountId: "accountId",
  investmentId: "investmentId",
  amount: "amount",
  status: "status",
  distributedAt: "distributedAt",
  createdAt: "createdAt",
  updatedAt: "updatedAt"
} as const;

export type ProfitScalarFieldEnum =
  (typeof ProfitScalarFieldEnum)[keyof typeof ProfitScalarFieldEnum];

export const TransactionScalarFieldEnum = {
  id: "id",
  userId: "userId",
  investmentId: "investmentId",
  transactionType: "transactionType",
  transactionStatus: "transactionStatus",
  amountInUSD: "amountInUSD",
  charge: "charge",
  actualAmountInUSD: "actualAmountInUSD",
  rate: "rate",
  currency: "currency",
  amountInCurrency: "amountInCurrency",
  isWireTransfer: "isWireTransfer",
  isGiftCard: "isGiftCard",
  giftCardData: "giftCardData",
  wireTransferEmail: "wireTransferEmail",
  depositWalletAddress: "depositWalletAddress",
  depositWalletAddressNetwork: "depositWalletAddressNetwork",
  withdrawalWalletAddress: "withdrawalWalletAddress",
  withdrawalWalletAddressNetwork: "withdrawalWalletAddressNetwork",
  approvedAt: "approvedAt",
  failedAt: "failedAt",
  failReason: "failReason",
  description: "description",
  createdAt: "createdAt",
  updatedAt: "updatedAt"
} as const;

export type TransactionScalarFieldEnum =
  (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum];

export const CurrencyScalarFieldEnum = {
  id: "id",
  name: "name",
  symbol: "symbol",
  abbr: "abbr",
  image: "image",
  rate: "rate",
  rateUpdatedAt: "rateUpdatedAt",
  walletAddress: "walletAddress",
  walletAddressNetwork: "walletAddressNetwork",
  isAvailableForWithdrawal: "isAvailableForWithdrawal",
  withdrawalCharge: "withdrawalCharge",
  createdAt: "createdAt",
  updatedAt: "updatedAt"
} as const;

export type CurrencyScalarFieldEnum =
  (typeof CurrencyScalarFieldEnum)[keyof typeof CurrencyScalarFieldEnum];

export const NotificationScalarFieldEnum = {
  id: "id",
  userId: "userId",
  title: "title",
  description: "description",
  isRead: "isRead",
  icon: "icon",
  createdAt: "createdAt",
  updatedAt: "updatedAt"
} as const;

export type NotificationScalarFieldEnum =
  (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum];

export const FaqScalarFieldEnum = {
  id: "id",
  slug: "slug",
  title: "title",
  description: "description",
  createdAt: "createdAt",
  updatedAt: "updatedAt"
} as const;

export type FaqScalarFieldEnum = (typeof FaqScalarFieldEnum)[keyof typeof FaqScalarFieldEnum];

export const BanScalarFieldEnum = {
  id: "id",
  userId: "userId",
  reason: "reason",
  bannedBy: "bannedBy",
  areInvestmentsFrozen: "areInvestmentsFrozen",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  expiresAt: "expiresAt",
  active: "active",
  ipAddresses: "ipAddresses"
} as const;

export type BanScalarFieldEnum = (typeof BanScalarFieldEnum)[keyof typeof BanScalarFieldEnum];

export const SortOrder = {
  asc: "asc",
  desc: "desc"
} as const;

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];

export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull
} as const;

export type NullableJsonNullValueInput =
  (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput];

export const JsonNullValueInput = {
  JsonNull: JsonNull
} as const;

export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput];

export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const;

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter];

export const QueryMode = {
  default: "default",
  insensitive: "insensitive"
} as const;

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode];

export const NullsOrder = {
  first: "first",
  last: "last"
} as const;

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder];

/**
 * Field references
 */

/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "String">;

/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "Boolean">;

/**
 * Reference to a field of type 'UserRole'
 */
export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "UserRole">;

/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "DateTime">;

/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "Json">;

/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "QueryMode">;

/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "Float">;

/**
 * Reference to a field of type 'KycStatus'
 */
export type EnumKycStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "KycStatus">;

/**
 * Reference to a field of type 'InvestmentStatus'
 */
export type EnumInvestmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "InvestmentStatus"
>;

/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, "Int">;

/**
 * Reference to a field of type 'ProfitStatus'
 */
export type EnumProfitStatusFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "ProfitStatus"
>;

/**
 * Reference to a field of type 'TransactionType'
 */
export type EnumTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "TransactionType"
>;

/**
 * Reference to a field of type 'TransactionStatus'
 */
export type EnumTransactionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  "TransactionStatus"
>;

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number;
};

export type Datasource = {
  url?: string;
};
export type Datasources = {
  db?: Datasource;
};

export const defineExtension = runtime.Extensions
  .defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<
  "define",
  TypeMapCb,
  runtime.Types.Extensions.DefaultArgs
>;
export type DefaultPrismaClient = PrismaClient;
export type ErrorFormat = "pretty" | "colorless" | "minimal";
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources;
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string;
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat;
  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   *
   * // Emit as events
   * log: [
   *   { emit: 'stdout', level: 'query' },
   *   { emit: 'stdout', level: 'info' },
   *   { emit: 'stdout', level: 'warn' }
   *   { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[];
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number;
    timeout?: number;
    isolationLevel?: TransactionIsolationLevel;
  };
  /**
   * Global configuration for omitting model fields by default.
   *
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig;
}
export type GlobalOmitConfig = {
  user?: Prisma.UserOmit;
  account?: Prisma.AccountOmit;
  accountGroup?: Prisma.AccountGroupOmit;
  token?: Prisma.TokenOmit;
  investmentPlan?: Prisma.InvestmentPlanOmit;
  investment?: Prisma.InvestmentOmit;
  profit?: Prisma.ProfitOmit;
  transaction?: Prisma.TransactionOmit;
  currency?: Prisma.CurrencyOmit;
  notification?: Prisma.NotificationOmit;
  faq?: Prisma.FaqOmit;
  ban?: Prisma.BanOmit;
};

/* Types for Logging */
export type LogLevel = "info" | "query" | "warn" | "error";
export type LogDefinition = {
  level: LogLevel;
  emit: "stdout" | "event";
};

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition
  ? T["emit"] extends "event"
    ? T["level"]
    : never
  : never;
export type GetEvents<T extends any> =
  T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never;

export type QueryEvent = {
  timestamp: Date;
  query: string;
  params: string;
  duration: number;
  target: string;
};

export type LogEvent = {
  timestamp: Date;
  message: string;
  target: string;
};
/* End Types for Logging */

export type PrismaAction =
  | "findUnique"
  | "findUniqueOrThrow"
  | "findMany"
  | "findFirst"
  | "findFirstOrThrow"
  | "create"
  | "createMany"
  | "createManyAndReturn"
  | "update"
  | "updateMany"
  | "updateManyAndReturn"
  | "upsert"
  | "delete"
  | "deleteMany"
  | "executeRaw"
  | "queryRaw"
  | "aggregate"
  | "count"
  | "runCommandRaw"
  | "findRaw"
  | "groupBy";

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName;
  action: PrismaAction;
  args: any;
  dataPath: string[];
  runInTransaction: boolean;
};

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>
) => runtime.Types.Utils.JsPromise<T>;

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>;
